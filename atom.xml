<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ga Tech]]></title>
  <subtitle><![CDATA[1.01 everyday]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-09-30T15:04:49.766Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[GaDii]]></name>
    <email><![CDATA[ggd747@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Rails Pacific 2014 Experience]]></title>
    <link href="http://yoursite.com/blog/2014/09/28/rails-pacific-2014/"/>
    <id>http://yoursite.com/blog/2014/09/28/rails-pacific-2014/</id>
    <published>2014-09-27T16:47:07.000Z</published>
    <updated>2014-09-27T16:53:39.000Z</updated>
    <content type="html"><![CDATA[<p>趁著記憶猶新以及滿肚子燒肉還沒消化完畢（都飽到天靈蓋了）來寫一下 Rails Conf 2014 的心得。</p>
<h1 id="DAY_1">DAY 1</h1>
<p>這次的場地辦在張榮發基金會國際會議中心，地點實在讚到沒話說，離捷運站只要走路 5 ~ 10 分鐘即可到達（對其他縣市甚至是國外的參與者非常貼心）。  </p>
<h2 id="Panel_Discussion_:_Refactoring">Panel Discussion : Refactoring</h2>
<p>第一天早上是大神們的兩場座談，第一場是由 Ryan Bigg, Nick Sutterer, Akira Matsuda 以及 Shibata Hiroshi 分享 refactor 的經驗，由 Mark Chao 主持。<br>當中大概是四位講者互相吐苦水，Ryan 說他甚至有一個專案花了四個月的時間來 refactor…<br>其中印象比較深刻的是被問到對於 over refactoring 的看法：Akira 說他 over refactoring 的經驗是過度抽象化，有時候甚至是 commit 之後才覺得後悔；Ryan 認為有時候一些 method 只有在一個地方被呼叫到的話，就不應該抽出來，而是讓整個 function 一氣呵成；Nick 則不贊同 Ryan 的想法，他認為這些 method 即使是只有被呼叫一次，但如果抽出來能夠讓 code 可讀性變高，那還是應該要拆開比較好。  </p>
<h2 id="Becoming_a_senior_developer">Becoming a senior developer</h2>
<p>第二場是由 Richard Lee, Prem Sichanugrist, Richard Schneeman 以及 DingDing Ye 分享如何成為一個 senior developer，由 Kenneth Lee 主持。<br>其中印象比較深刻的是 Richard Schneeman 說他成為 senior developer 的方式是先 fake it，並透過教其他人的過程來教學相長(yeah, fake it until you make it)；Richard Lee 認為 senior developer 應該要會懂得 trace source code（例如 Rails）；Prem 則認為 senior developer 要會懂得自己 trouble shooting。<br>當中有人問到如何區別 lead developer 以及 project manamger。Richard Schneeman 給的答案很乾脆，如果你回 email 的時間大於 50%，那基本上就不算是 developer 了XD。</p>
<h2 id="Workshop">Workshop</h2>
<p>下午則是有三軌 workshop 同時進行，主題分別為 TDD，refactoring 以及 infrastructure setup。<br>我參加的是由 Richard Lee 所主持的 infrastructure setop: Chef Workshop / Immutable infrastructure，workshop 內容是讓參與者學會用 chef/kitchen 寫簡單的 recpie 到 vagrant 上面部署需要的套件，並用 serverspec 來測試這些 recipe 是否有正確執行。整場 workshop 分成四個進度來進行，步調不慍不火，Richard Lee 也介紹該如何透過閱讀 open source 來建立符合自己需求的 cookbook，會後還留下大段時間進行交流，看得出非常用心準備！</p>
<h1 id="DAY_2">DAY 2</h1>
<p>第二天其實是從 9:00 開始（比第一天早一小時），但似乎有些人沒有注意到而錯過開頭部分有點可惜。（給第二天遲到而錯過資訊的人：持 Rails Conf 2014 的名牌到天瓏書局買書會有折扣，永久有效！）  </p>
<h2 id="Render_It!:_A_Deep_Dive_into_ActionView_and_Template_Engines">Render It!: A Deep Dive into ActionView and Template Engines</h2>
<p>第一場是由 Akira Matsuda 分享他從 Rails 抽取 ActionView 的經驗（在 Rails 4.1 以後，ActionView 單獨抽成一個 gem），主要是嘗試 Rails 是否能在沒有 ActionView 的情況下還能正常運作；以及 nonRails App 是否能夠使用 ActionView。<br>結果發現即使在產生 Rails 專案時指定不要 require ActionView，Rails 還是可以 render 頁面（原本以為抽掉 ActionView 應該是不能 render 頁面才對），因為其他的 Rails core module 例如 ActionPack 還是會自己 require ActionView。<br>而在 nonRails App 底下透過 require ActionView 來 render 頁面的想法也是失敗的（render :text 有成功，但是 render :file 失敗），因為 render :file 會需要用到 <code>::Mime</code>，但是 <code>::Mime</code> 卻寫在 ActionPack 裡頭…<br>Akira 說他來 Rails Conf 的前兩天才發現這個 bug <a href="https://github.com/rails/rails/issues/17030" target="_blank" rel="external">https://github.com/rails/rails/issues/17030</a>，所以剛剛的分享都是做白工XD 但他也有提到一個不錯的想法，就是即使是 Rails 這麼大型的 open source project，你還是可以透過這類型的奇形怪招 idea 來找到 bug。<br>Akira 後半段則是分享 Erubis 當中一些奇怪的 monkey patch，以及 erb, haml 以及 slim 的效能。根據他的 benchmark，會發現這三者之中 slim 的效能最好，erb 次之（但跟 slim 相差無幾），haml 的效能則是無比的慘…（Akira 說他自己也是 haml 的 committer 之一XD），雖然他有針對 haml 進行效能改善，但依舊無法看到前兩者的車尾燈。</p>
<h2 id="Zero_downtime_payment_platforms">Zero downtime payment platforms</h2>
<p>這場由 Prem Sichanugrist 分享他實務上遇到的狀況，遇到 payment downtime 時候該如何處理。<br>Payment downtime 的原因有很多，諸如 request timeout，third party failed 等，無論哪個環節出錯就等於這個訂單失敗，也就等於流失一個客戶。<br>Prem 於是制定一個「可接受的風險」計劃：如果這個訂單是來自信賴的客戶，或是交易金額小於一定額度時，就算是遇到 payment downtime 時，也會因為訂單符合「可接受的風險」而讓訂單成立。<br>上述聽起來已經設想了大部分會遇到的狀況，但因為 Prem 他們的系統是放在 Heroku，而 Heroku 又是建在 AWS 上面，考慮到 2012/7 期間 AWS 曾經發生大規模 downtime，於是又衍生出下列的 solution：（會場中剛好有個講者 Richard Schneeman 是來自於 Heroku，當 Prem 講到受 AWS dowetime 影響時，Richard 整個裝死假裝在認真寫 code XDDD）<br>Prem 另外在 AWS 以外的 server 建立一個子系統稱為 chocolate，當一筆訂單 request 進來，透過 Akamai dynamic router 時會進行判斷，如果主系統的 respond time 大於一定時間就認定為 payment down 並把 request 導到 chocolate。此時 chocolate 會把 request 完整記錄起來並根據「可接受風險」來決定是否要讓這筆訂單成立。等到主系統回復狀態時，chocolate 再把這個 request 像 VCR 般地重新導到主系統。<br>Prem 也說這個方法有好有壞，好處是的確降低了 payment downtime 造成的損失；但壞處是整個系統設計起來非常複雜，而且由於 Heroku 會將 request 隨機導到不同的 Dynos，有時會遇到某些 Dyno 明明閒置，但 Heroku 卻把 reqeust 導到已經忙碌的 Dyno，造成該 request 因為需要等待其他的 reqeust 完成而被判斷為 request timeout。</p>
<h2 id="Crafting_Rails_Culture">Crafting Rails Culture</h2>
<p>這場由 Shibata Hiroshi 分享他的團隊在維護 PHP 以及 Rails 之間的經驗，可惜我對日語發音的英文比較不在行，所以基本上這場比較沒 follow 到 @_@，要等其他人的心得分享了…。</p>
<h2 id="Better_Rails_by_Knowing_Better_Database">Better Rails by Knowing Better Database</h2>
<p>這場由 Ding-ding Ye 分享 Rails 在使用 ActiveRecord 時，必須注意到的 SQL 觀念，例如 index, transaction… 等。由於這場比較偏技術性，主要內容都在講者投影片中，透過會後錄影可以學到不少知識。</p>
<h2 id="Trailblazer_-_A_New_Architecture_For_Rails">Trailblazer - A New Architecture For Rails</h2>
<p>這場由 Nick Sutterer 分享開發者不應被侷限在 Rails 的基本 MVC 架構，而應該適時地加入不同 layer 來提高程式碼的可讀性。<br>Nick 建議不要盲目地遵從 Rails MVC，他寫了一套 architecture 稱為 <a href="https://github.com/apotonick/trailblazer" target="_blank" rel="external">Trailblazer</a> 讓整個流程更富彈性及可讀性。<br>另外他也不喜歡 strong parameters 以及 nested attributes 的設計，認為前者不應該出現在 controller 中，而後者更是讓整個 model 以及 form 髒到不行，於是他針對這樣子的問題設計出了 <a href="https://github.com/apotonick/reform" target="_blank" rel="external">reform</a>，透過 reform 來決定哪些 attributes 可以通過，並解決了 nested attributes 冗長的寫法。<br>Nick 同時也對 helper 頗有微詞，認為 helper 是 functional 的寫法，非常難以閱讀。針對此問題他也設計了 <a href="https://github.com/apotonick/cells" target="_blank" rel="external">cells</a> 這個小型 MVC 讓整個 views 更趨向 OO。</p>
<h2 id="Exception_Handling:_Designing_Robust_Software">Exception Handling: Designing Robust Software</h2>
<p>這場由 ihower 分享 software 該如何處理 exception 以及各種 best practice。由於也是技術性內容，可搭配投影片更易吸收：<a href="http://www.slideshare.net/ihower/exception-handling-designing-robust-software-in-ruby" target="_blank" rel="external">http://www.slideshare.net/ihower/exception-handling-designing-robust-software-in-ruby</a></p>
<h2 id="Ten_Years_of_Rails_Deployment">Ten Years of Rails Deployment</h2>
<p>這場由 Engine Yard 的 Christopher Rigor 帶來 Rails 10 年回顧。由於是 Rails 人生跑馬燈，我也不知道該怎麼寫… @_@</p>
<h2 id="Going_the_Distance">Going the Distance</h2>
<p>這場由 Heroku 的 Richard Schneeman 分享他所寫的「英文建議字」演算法。<br>Richard 說他常因為拼錯字而困擾，比如 git commit 打成 git commmit，此時系統會很貼心地問你是不要想要打 “commit”。於是 Richard 就針對這方面的推薦字演算法來進行 survey ，並用 Ruby 來實現他所 survey 到的 Levenshtein algorithm。<a href="https://github.com/schneems/going_the_distance" target="_blank" rel="external">Going The Distance</a>  </p>
<p>當中令我印象深刻的是，Richard 說他並非是想要不斷鑽研這方面的演算法，而是為了給與會者一個觀念：如果你對某個領域有興趣，就上台去 talk，之後就會有人問你是否有聽過 xxx 或試過 ooo，當然你一定會沒有，但與此同時你也就知道可以往 xxx 或 ooo 方向來努力了。  </p>
<p>值得一提的小插曲：Richard 秀出他的 silde 說他是 Rails committer 排名第 47 位，然後…</p>
<h2 id="Multitenancy_with_Rails">Multitenancy with Rails</h2>
<p>然後 Ryan Bigg 一上台第一頁就秀出他的 slide 說他是 Rails committer 排名第 21 位，立馬給 Richard 一記悶棍 XDDD  </p>
<p>這場由 Ryan Bigg 分享他對 multitenancy project 的實作以及看法，內容小偏技術性，可以從他的書 <a href="https://leanpub.com/multi-tenancy-rails" target="_blank" rel="external">Multitenancy with Rails</a> 來獲得更多資訊。</p>
<h1 id="AFTER_PARTY">AFTER PARTY</h1>
<p>第一次在國內吃到這麼豪華的 after party，我們是在「好客-酒吧燒烤」啤酒 + 燒烤吃到飽，當中餐點還有螃蟹，也是吃到飽…飽到吐。  </p>
<ul>
<li>然後外國講者實在也太愛啤酒，在前往 after party 途中我遇到 Nick，他還邊喝啤酒邊發送一瓶給我 =.=  </li>
<li>因為我還蠻喜歡 Nick 抽取 layer 的思維，就順便問他幹嘛不乾脆自己寫一個 framework（Richard 還在旁邊說對啊可以叫 Nick on Rails），Nick 就說不行因為這樣就不能參加 Rails Conf 了 XDDD  </li>
<li>外國講者似乎很期待明年的 Rails Conf，因為在南台灣，聽到有海灘又有啤酒整個眼睛發亮 =.=</li>
<li>期間有遇到 Ryan 跟他說想要他的簽名但很可惜電子書無法簽，他立馬拿出 iphone6 開個不知什麼 app 叫我簽上名字說會再寄給我，心裡整個爽到 XD</li>
</ul>
<h1 id="WRAP_UP">WRAP UP</h1>
<p>雖然有的人（包括我）覺得 $5000 的 conf 似乎有點貴，但場地、整體進度安排、workshop、分享的內容、會間餐點一直到最後的 after party 真的會讓你感覺值回票價！<br>再次感謝主辦人 xdite，主持人 Kenneth Lee, Mark Chao，以及辛苦的工作人員！  </p>
<p>Rails Pacific Conference 2015 @Kaohsiung 我們明年見！</p>
]]></content>
    <summary type="html">
    <![CDATA[Rails Pacific 2014 experience]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails 的 count, length 以及 size]]></title>
    <link href="http://yoursite.com/blog/2014/09/16/rails-size-length-count/"/>
    <id>http://yoursite.com/blog/2014/09/16/rails-size-length-count/</id>
    <published>2014-09-16T07:19:56.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>列出 <code>count</code>, <code>length</code> 以及 <code>size</code> 的特性：</p>
<h2 id="count">count</h2>
<ul>
<li>使用 SQL query (SELECT COUNT(*) FROM…)</li>
<li>不會儲存計算物件，每次執行 <code>count</code> 都會重新跑一次 SQL query</li>
<li>速度比 <code>length</code> 快</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">2.1.2 :001 &gt;</span> collection = <span class="constant">User</span>.all ; nil</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> nil</span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :002 &gt;</span> collection.count</span></div><div class="line">   (<span class="number">0</span>.<span class="number">4</span>ms)  <span class="constant">SELECT</span> <span class="constant">COUNT</span>(*) <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :003 &gt;</span> collection.count</span></div><div class="line">   (<span class="number">0</span>.<span class="number">4</span>ms)  <span class="constant">SELECT</span> <span class="constant">COUNT</span>(*) <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div></pre></td></tr></table></figure>

<h2 id="length">length</h2>
<ul>
<li>回傳一個集合的<code>長度</code></li>
<li>計算物件會儲存在記憶體中</li>
<li>如果是 eager loaded 的物件，執行速度會非常快</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">2.1.2 :004 &gt;</span> collection = <span class="constant">User</span>.all ; nil</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> nil</span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :005 &gt;</span> collection.length</span></div><div class="line">  <span class="constant">User</span> <span class="constant">Load</span> (<span class="number">1.5</span>ms)  <span class="constant">SELECT</span> `users`.* <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :006 &gt;</span> collection = <span class="constant">User</span>.all ; nil</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> nil</span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :007 &gt;</span> collection.to_a ; nil</span></div><div class="line">  <span class="constant">User</span> <span class="constant">Load</span> (<span class="number">1.6</span>ms)  <span class="constant">SELECT</span> `users`.* <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> nil</span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :008 &gt;</span> collection.length</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :009 &gt;</span> collection.length</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div></pre></td></tr></table></figure>

<h2 id="size">size</h2>
<ul>
<li>綜合上述兩者的特性</li>
<li>如果是已經在記憶體中的集合，就直接計算<code>長度</code> (不會有額外的 query)</li>
<li>如果是 lazy loaded 的集合，就會直行 SQL query</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">2.1.2 :010 &gt;</span> collection = <span class="constant">User</span>.all ; nil</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> nil</span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :011 &gt;</span> collection.count</span></div><div class="line">   (<span class="number">2.9</span>ms)  <span class="constant">SELECT</span> <span class="constant">COUNT</span>(*) <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :012 &gt;</span> collection.count</span></div><div class="line">   (<span class="number">0</span>.<span class="number">7</span>ms)  <span class="constant">SELECT</span> <span class="constant">COUNT</span>(*) <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :013 &gt;</span> collection.size</span></div><div class="line">   (<span class="number">0</span>.<span class="number">7</span>ms)  <span class="constant">SELECT</span> <span class="constant">COUNT</span>(*) <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :014 &gt;</span> collection.to_a ; nil</span></div><div class="line">  <span class="constant">User</span> <span class="constant">Load</span> (<span class="number">2.9</span>ms)  <span class="constant">SELECT</span> `users`.* <span class="constant">FROM</span> `users`</div><div class="line"><span class="output"><span class="status"> =&gt;</span> nil</span></div><div class="line"><span class="input"><span class="prompt">2.1.2 :015 &gt;</span> collection.size</span></div><div class="line"><span class="output"><span class="status"> =&gt;</span> <span class="number">284</span></span></div></pre></td></tr></table></figure>

<h3 id="結論">結論</h3>
<p>記得在合適的情況使用這些 method，否則可能會因為不必要的 collection loading 造成浪費。<br>如果還是不知道該怎麼分辨使用時機的話，就用 <code>size</code> 吧！</p>
<p>source: <a href="http://dev.mensfeld.pl/2014/09/activerecord-count-vs-length-vs-size-and-what-will-happen-if-you-use-it-the-way-you-shouldnt/" target="_blank" rel="external">http://dev.mensfeld.pl/2014/09/activerecord-count-vs-length-vs-size-and-what-will-happen-if-you-use-it-the-way-you-shouldnt/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>列出 <code>count</code>, <code>length</code> 以及 <code>size</code> 的特性：</p>
<h2 id="count">count</h2>
<ul>
<li>使用 SQL query (SELECT COUNT(*)]]>
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/tags/Ruby-on-Rails/"/>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Service Objects 整理架構]]></title>
    <link href="http://yoursite.com/blog/2014/08/25/Service-Objects-%E6%95%B4%E7%90%86%E6%9E%B6%E6%A7%8B/"/>
    <id>http://yoursite.com/blog/2014/08/25/Service-Objects-整理架構/</id>
    <published>2014-08-25T08:54:47.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>目前專案是按照 <a href="http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html" target="_blank" rel="external">這篇</a> 的方式來組織 Rails 專案架構：<br>該篇主要也是使用 service objects 的方式來組織，把較複雜的處理從 Controllers 當中抽出來並放到 <code>services</code> 資料夾中。<br>比較不同的是該作者不推薦以 <code>XXXService</code> 的方式來命名 service objects (比如 <code>TransactionService</code>)；反而推薦一個行為就拆成一個 service，並且以「動詞」為開頭來命名，例如 <code>ApproveTransation</code>, <code>CancelTransaction</code>, <code>BlockAccount</code>…等，如果是同樣類型的 service 還可以另外用個資料夾包起來 (例如 <code>app/services/transaction/approve.rb</code>, <code>app/services/transaction/cancel.rb</code>…)  </p>
<p>好處是可以很容易從名稱就知道這個 service object 的目的是什麼，而且簡化每個 object 的責任以方便測試。  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># app/services/accept_invite.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcceptInvite</span></span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.call(invite, user)</div><div class="line">    invite.accept!(user)</div><div class="line">    <span class="constant">UserMailer</span>.invite_accepted(invite).deliver</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>



<p>今天又看到 <a href="http://vrybas.github.io/blog/2014/08/15/a-way-to-organize-poros-in-rails/" target="_blank" rel="external">另一篇</a> 有趣的整理方式：<br>作者主要想法是不要把 service objects 都放在同一個地方，畢竟有些是只跟 controller 有關，有些只跟 model 有關，建議把這些 POROs 放到跟其有關的目錄底下。  </p>
<p>例如跟 controller 有關的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">controllers</span></div><div class="line">├── dashboard_controller</div><div class="line">│   └── user_list.rb</div><div class="line">└── dashboard_controller.rb</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># app/controllers/dashboard_controller/user_list.rb</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DashboardController::UserList</span></span></div><div class="line">  <span class="comment"># codes codes codes</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DashboardController</span> <span class="inheritance">&lt; <span class="parent">ApplicationController</span></span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>index</div><div class="line">    <span class="variable">@users</span> = <span class="constant">UserList</span>.new(current_user,</div><div class="line">                          <span class="symbol">page:</span> params[<span class="symbol">:page</span>],</div><div class="line">                          <span class="symbol">per_page:</span> params[<span class="symbol">:per_page</span>],</div><div class="line">                          <span class="symbol">sort_by:</span> params[<span class="symbol">:sort_by</span>],</div><div class="line">                          <span class="symbol">order_asc:</span> params[<span class="symbol">:order_asc</span>]).all</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>


<p>或是跟 model 有關的：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">models</div><div class="line">├── <span class="literal">user</span></div><div class="line">│   └── following_policy.rb</div><div class="line">│   └── lockable.rb</div><div class="line">│   └── settings.rb</div><div class="line">└── <span class="literal">user</span>.rb</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># app/models/user/lockable.rb</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">User::Lockable</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>lock_access!</div><div class="line">    update(<span class="symbol">locked_at:</span> <span class="constant">Time</span>.now)</div><div class="line">    <span class="constant">UserMailer</span>.account_locked_email(<span class="keyword">self</span>).deliver</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># ...</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># app/models/user/settings.rb</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">User::Settings</span></span></div><div class="line">  extend <span class="constant">ActiveSupport::Concern</span></div><div class="line"></div><div class="line">  included <span class="keyword">do</span></div><div class="line">    store_accessor <span class="symbol">:settings</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># ...</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># app/models/user/following_policy.rb</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User::FollowingPolicy</span></span></div><div class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:current_user</span>, <span class="symbol">:other_user</span>, <span class="symbol">:account_verification</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>initialize(current_user, other_user)</div><div class="line">    <span class="variable">@current_user</span> = current_user</div><div class="line">    <span class="variable">@other_user</span> = other_user</div><div class="line">    <span class="variable">@account_verification</span> = current_user.account_verification</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># ...</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>很喜歡 Rails pure MVC 架構的人可以試試 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>目前專案是按照 <a href="http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html" target="_blank" rel="external">這篇</a> 的方式來組織 Rails 專案架]]>
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/tags/Ruby-on-Rails/"/>
    
      <category term="design pattern" scheme="http://yoursite.com/tags/design-pattern/"/>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails 4(5)]]></title>
    <link href="http://yoursite.com/blog/2013/06/05/rails-4-5/"/>
    <id>http://yoursite.com/blog/2013/06/05/rails-4-5/</id>
    <published>2013-06-05T14:45:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>紀錄 Rails 3 to Rails 4 的一些改變。<br><a id="more"></a></p>
<h2 id="FILTERS">FILTERS</h2>
<p>在 Rails 3 當中常常使用的 <code>before_filter</code>，因為語意不清，因此在 Rails 4 改名為：<code>before_action</code>。（但是念舊的人依然可以在 Rails 4 當中使用 <code>before_filter</code> ）</p>
<h2 id="SESSION">SESSION</h2>
<p>首先看一下 Rails 是如何儲存 session 的…  </p>
<ol>
<li>browser 第一次發 request 給 server</li>
<li>server 產生 session[:user_id] = user.id</li>
<li>server 把 session data 傳送給 browser 並存成 cookie</li>
<li>browser 之後發送的 request 當中就會夾帶 cookie</li>
<li>server 接著拿來使用：@current_user ||= User.find(session[:user_id])</li>
</ol>
<p>在 Rails 3 中，會先將 session 變數以 digitally signed cookies 的形式送給 browser，使用者無法針對此變數進行修改，但可以讀取。<br>    Name: _AppExampleDigitallySigned<br>    Value: BAh7CUk….<br>有心的使用者此時可以用 ruby code 將其解讀出來：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'rack'</span></div><div class="line">cookie <span class="subst">=</span> <span class="string">"BAh7CUk..."</span></div><div class="line">Rack<span class="tag">::Session</span><span class="tag">::Cookie</span><span class="tag">::Base64</span><span class="tag">::Marshal.new.decode</span>(cookie)</div></pre></td></tr></table></figure>

<p>就會得到 user_id 等有用的資訊：</p>
<pre><code>=&gt; {<span class="string">"session_id"</span>=&gt;<span class="string">"d3b170ba..."</span>, <span class="string">"user_id"</span>=&gt; <span class="string">"123"</span>, <span class="string">"csrf_token"</span>=&gt;<span class="string">"rtkofTr..."</span>}
</code></pre><p>多少會有 security 風險存在。  </p>
<p>因此在 Rails 4 當中又多做了一層 security：將其 encrypt。因此使用者既無法修改，也無法讀取。<br>    Name: _ApplicationEnvryptedCookie<br>    Value: REE3QXILc…</p>
<p>此時就算使用 ruby code 來解讀：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'rack'</span></div><div class="line">cookie <span class="subst">=</span> <span class="string">"REE3QXILc..."</span></div><div class="line">Rack<span class="tag">::Session</span><span class="tag">::Cookie</span><span class="tag">::Base64</span><span class="tag">::Marshal.new.decode</span>(cookie)</div></pre></td></tr></table></figure>

<p>就會得到 <code>nil</code></p>
<h2 id="SECURING_SECRET_KEY_BASE">SECURING SECRET KEY BASE</h2>
<p>Rails 把 secret key base 放在下列位置，並以明碼顯示：</p>
<figure class="highlight"><figcaption><span>config/initializers/secret_token.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyApp<span class="tag">::Application.config.secret_key_base</span> <span class="subst">=</span> <span class="string">'7014c47...'</span></div></pre></td></tr></table></figure>

<p>因此如果要把 application 發佈為 public repo 的話，記得要改成環境變數：</p>
<figure class="highlight"><figcaption><span>config/initializers/secret_token.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyApp::Application.config.secret_key_base = ENV['SECRET_KEY_BASE']</div></pre></td></tr></table></figure>

<h2 id="FLASH_TYPES">FLASH TYPES</h2>
<p>在 Rails 3 當中，要使用 <code>flash</code> 的 helper methods 時，只能用 registered flash types：<code>notice</code> 以及 <code>alert</code>。<br>在 Rails 4 終於能夠自訂了：</p>
<figure class="highlight"><figcaption><span>controllers/application_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> <span class="inheritance">&lt; <span class="parent">ActionController::Base</span></span></span></div><div class="line">  add_flash_types <span class="symbol">:grunt</span>, <span class="symbol">:snarl</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>用法是：</p>
<figure class="highlight"><figcaption><span>controllers/users_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">flash[<span class="symbol">:grunt</span>] = <span class="string">'braaains...'</span></div><div class="line"></div><div class="line"><span class="comment"># 或是簡寫：</span></div><div class="line">redirect_to <span class="variable">@user</span>, <span class="symbol">grunt:</span> <span class="string">'braaains...'</span></div></pre></td></tr></table></figure>

<p>registered flash types:</p>
<figure class="highlight"><figcaption><span>views/users/show.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"grunt"</span>&gt;</span><span class="vbscript">&lt;%= grunt %&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[Rails 4]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails 4(4)]]></title>
    <link href="http://yoursite.com/blog/2013/06/02/rails-4-4/"/>
    <id>http://yoursite.com/blog/2013/06/02/rails-4-4/</id>
    <published>2013-06-02T04:03:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>紀錄 Rails 3 to Rails 4 的一些改變。<br><a id="more"></a></p>
<h2 id="STRONG_PARAMETERS">STRONG PARAMETERS</h2>
<p>在使用 Rails 3 的 form 上傳資料時，為了避免使用者上傳不必要的參數，會在 model 加上 whitelists 來過濾 mass assignment。比如：</p>
<figure class="highlight"><figcaption><span>models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  attr_accessible <span class="symbol">:name</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>controllers/users_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def <span class="operator"><span class="keyword">update</span></span></div><div class="line">  <span class="keyword">if</span> @<span class="keyword">user</span>.update_attributes(params[:<span class="keyword">user</span>])</div><div class="line">    redirect_to @<span class="keyword">user</span>, notice: <span class="string">'Updated'</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    render <span class="keyword">action</span>: <span class="string">'edit'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>這樣就能過濾使用者上傳的資料：<br>    Parameters: {“user”=&gt;{“name”=&gt;”Cowzombie”}}   # valid<br>    Parameters: {“user”=&gt;{“name”=&gt;”Cowzombie”, “admin”=&gt;”1”}}   # invalid</p>
<p>在 Rails 4 中，管理 whitelists 的工作由 model 交給了 controller。<br>因此 model 裡頭不會再有 whitelists，而 controller 則多了一層過濾：</p>
<figure class="highlight"><figcaption><span>models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>controllers/users_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> </span>update</div><div class="line">  <span class="keyword">if</span> <span class="variable">@user</span>.update(user_params)</div><div class="line">    redirect_to <span class="variable">@user</span>, <span class="symbol">notice:</span> <span class="string">'Updated'</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    render <span class="symbol">action:</span> <span class="string">'edit'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">private</div><div class="line">  <span class="function"><span class="keyword">def</span> </span>user_params</div><div class="line">    params.<span class="keyword">require</span>(<span class="symbol">:user</span>).permit(<span class="symbol">:name</span>)</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>

<h3 id="how_STRONG_PARAMETERES_works">how STRONG PARAMETERES works</h3>
<p>接下來看看 strong parameters 是如何運作的。假設我們的 application 收到的 parameter hash 如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">id</span>:<span class="value"> <span class="string">"1"</span>,</span></span></div><div class="line">  user: {</div><div class="line">    name: <span class="string">"Cowzombie"</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>首先看到 <code>params.require(:user)</code>，<code>require(:user)</code> 驗證 parameter hash 當中是否包含 <code>user</code> key，如果有就回傳 empty hash（因為此時還沒有同意傳入任何 parameters）；如果沒有就丟出錯誤並回傳 404：<br>    ActionController::ParameterMissing:<br>    param not found: user</p>
<p>再來看到整段 <code>params.require(:user).permit(:name)</code>，<code>permit(:name)</code> 表示只允許 <code>name</code> parameter 傳入，如果使用者多傳入其他的 parameter 比如 <code>admin</code>，<code>permit</code> 就會自動把不在清單裡的 parameter 給刪掉。  </p>
<p><code>permit</code> 同時也會檢查 parameter types（預設的 type 有 String, Symbol, NilClass…），並且設預會 log 住任何 unpermitted parameters。<br>如果想要在收到 unpermitted parameters 時候噴出錯誤訊息，可以到 <code>config/application.rb</code> 設定：</p>
<figure class="highlight"><figcaption><span>config/application.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">config.action_controller.action_on_unpermitted_parameters </span>=<span class="string"> :raise</span></div></pre></td></tr></table></figure>

<p>如果仍然要在 Rails 4 裡使用 <code>attr_accessible</code> 或是 <code>attr_protected</code>，可以使用這個 gem：</p>
<figure class="highlight"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">gem</span> <span class="string">'protected_attributes'</span></div></pre></td></tr></table></figure>

<p><a href="https://github.com/rails/strong_parameters" target="_blank" rel="external">https://github.com/rails/strong_parameters</a> 有更多關於 strong parameters 的資訊。</p>
<h2 id="REMOTE_FORMS">REMOTE FORMS</h2>
<h3 id="AUTHENTICITY_TOKEN">AUTHENTICITY TOKEN</h3>
<p>Rails 的 form 裡頭有個 authenticity_token：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form id=<span class="string">"edit_user_1"</span><span class="keyword">...</span>&gt;</div><div class="line">  &lt;input name=<span class="string">"authenticity_token"</span> type=<span class="string">"hidden"</span> value=<span class="string">"a1RuTJ...="</span> /&gt;</div><div class="line">  &lt;input id=<span class="string">"user_name"</span> type=<span class="string">"text"</span> value=<span class="string">"Cowzombie"</span> /&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>

<p>會在 submit form 的時候進行比對：<br>    Parameters: {“authenticity_token”=&gt;”a1RuTJ…=”,<br>      “user”=&gt;{“name”=&gt;”Cowzombie”}, “id”=&gt;”1”}</p>
<p>當我們使用 remote form 的時候，這個 authenticity_token 也有包含在裡頭：</p>
<figure class="highlight"><figcaption><span>views/users/_form.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%= form_for(@user, remote: true) do |f| %&gt;</div><div class="line">  &lt;%= f.text_field :name %&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">&lt;% end %&gt;</div></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form data-remote=<span class="string">"true"</span> id=<span class="string">"edit_user_1"</span><span class="keyword">...</span>&gt;</div><div class="line">  &lt;input name=<span class="string">"authenticity_token"</span> type=<span class="string">"hidden"</span> value=<span class="string">"iS8pNE...="</span> /&gt;</div><div class="line">  &lt;input id=<span class="string">"user_name"</span> type=<span class="string">"text"</span> value=<span class="string">"Cowzombie"</span> /&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>

<p>但是實際上，在我們使用 AJAX request 時，Rails 並不會用到 remote form 裡面的這個 authenticity_token，而是會使用 meta 裡頭相同的 token：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="variable">content=</span><span class="string">"iS8pNE...="</span> <span class="variable">name=</span><span class="string">"csrf-token"</span> /&gt;</div></pre></td></tr></table></figure>

<p>因此 Rails 4 就把 remote form 裡頭的 authenticity_token 給拿掉了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form data-remote=<span class="string">"true"</span> di=<span class="string">"dit_user_1"</span><span class="keyword">...</span>&gt;</div><div class="line">  &lt;input id=<span class="string">"user_name"</span> type=<span class="string">"text"</span> value=<span class="string">"Cowzombie"</span> /&gt;</div><div class="line">  <span class="keyword">...</span></div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>

<h4 id="what_if_JavaScript_turned_off_in_browsers">what if JavaScript turned off in browsers</h4>
<p>如果使用者的瀏覽器把 JavaScript 給關掉了，那這樣 Rails 就會因為讀不到 CSRF token 而噴錯誤：<br>    Can’t verify CSRF token authenticity<br>    ActionController::InvalidAuthenticityToken</p>
<p>要解決這個問題很簡單，只要再把 authenticity token 放回 remote form 就好。可以透過此設定：</p>
<figure class="highlight"><figcaption><span>config/application.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.action_view.embed_authenticity_token_<span class="keyword">in</span>_remote_forms = <span class="literal">true</span></div></pre></td></tr></table></figure>

<h3 id="PROTECT_FROM_FORGERY">PROTECT FROM FORGERY</h3>
<p>有些使用者會試圖假造 authenticity_token，在 Rails 3 當中遇到此情況時，預設會 reset session 並且把以下的 warning 給 log 起來：<br>    WARNING: Can’t verify CSRF token authenticity</p>
<p>而針對此情形， Rails 4 則有更多的處理方式（通常會放在 <code>controllers/applications.rb</code> 裡面）：<br>    protect_from_forgery with: :exception # this is a good idea! (and also the default)</p>
<pre><code><span class="comment"># 會產生錯誤：</span>
<span class="literal">ActionController::InvalidAuthenticityToken</span>
</code></pre><p>或是<br>    protect_from_forgery with: :null_session</p>
<pre><code><span class="preprocessor"># 會清空 session，但不會產生錯誤（直到接收到 valid request 為止）</span>
</code></pre><p>或是</p>
<pre><code>protect_from_forgery <span class="symbol">with:</span> <span class="symbol">:reset_session</span>
<span class="comment"># 會針對這個使用者產生新的 session，並把舊的 session 給 destroy 掉</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[Rails 4]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails 4(3)]]></title>
    <link href="http://yoursite.com/blog/2013/06/01/rails-4-3/"/>
    <id>http://yoursite.com/blog/2013/06/01/rails-4-3/</id>
    <published>2013-05-31T16:25:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>紀錄 Rails 3 to Rails 4 的一些改變。<br><a id="more"></a></p>
<h2 id="SCOPES">SCOPES</h2>
<p>在 Rails 3 當中，<code>scope</code> 的寫法如下（稱為 eager-evaluated scoped）：<br>    scope :sold, where(state: ‘sold’)<br>    default_scope where(state: ‘available’)</p>
<p>這樣的寫法在 Rails 4 也被摒棄掉，而改為：<br>    scope :sold, -&gt;{ where(state: ‘sold’) }<br>後面必須改為 proc object 才行。  </p>
<p>而 <code>default_scope</code> 後面則可以接 proc object 或 block：<br>    default_scope { where(state ‘available’) }<br>    default_scope -&gt;{ where(state ‘available’) }</p>
<h3 id="EAGER-LOADED_SCOPES">EAGER-LOADED SCOPES</h3>
<p>Rails 3 <code>scope</code> 寫法被摒棄的原因如下：<br>    scope :recent, where(published_at: 2.weeks.ago)</p>
<p>在 class 被載入時，date 只會解析一次，之後用到這個 <code>scope</code> 時就會沿用之前所解析的 date，因此 published_at 就固定在那天而不會改變了。  </p>
<p>另一個例子：<br>    scope :recent, -&gt;{ where(published_at: 2.weeks.ago) }<br>    scope :recent_red, recent.where(color: ‘red’)</p>
<p>雖然第一個 <code>scope</code> 有正確使用 proc object 來避免 date 固定，但第二個 <code>scope</code> 卻仍然會使用先前被解析的 recent，而導致 date 不正確。  </p>
<p>為了避免這些情形，Rails 4 才全面改用 proc object 確保這些 condition 都會在需要的時候進行解析：<br>    scope :recent, -&gt;{ where(published_at: 2.weeks.ago) }<br>    scope :recent_red, -&gt;{ recent.where(color: ‘red’) }</p>
<h2 id="RELATION#NONE">RELATION#NONE</h2>
<p>在 Rails 3 當中，我們常常會列出某個 user 的 posts，再針對這些 posts 進行處理。當 posts 為 <code>[]</code> 時，就必須特別處理（否則會出現 NoMethodError），比如：</p>
<figure class="highlight"><figcaption><span>models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> </span>visible_posts</div><div class="line">    <span class="keyword">case</span> role</div><div class="line">    <span class="keyword">when</span> <span class="string">'Country Manager'</span></div><div class="line">      <span class="constant">Post</span>.where(<span class="symbol">country:</span> country)</div><div class="line">    <span class="keyword">when</span> <span class="string">'Reviewer'</span></div><div class="line">      <span class="constant">Post</span>.published</div><div class="line">    <span class="keyword">when</span> <span class="string">'Bad User'</span></div><div class="line">      [] <span class="comment"># represents empty collectoin</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>controllers/posts_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">...</span></div><div class="line">@posts = current_user.visible_posts</div><div class="line"></div><div class="line"><span class="keyword">if</span> @posts.any?</div><div class="line">  @posts.recent</div><div class="line"><span class="keyword">else</span></div><div class="line">  []</div><div class="line">end</div></pre></td></tr></table></figure>

<p>看起來非常的繁瑣。  </p>
<p>Rails 4 提供了 <code>none</code> method 來解決：</p>
<figure class="highlight"><figcaption><span>models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> </span>visible_posts</div><div class="line">    <span class="keyword">case</span> role</div><div class="line">    <span class="keyword">when</span> <span class="string">'Country Manager'</span></div><div class="line">      <span class="constant">Post</span>.where(<span class="symbol">country:</span> country)</div><div class="line">    <span class="keyword">when</span> <span class="string">'Reviewer'</span></div><div class="line">      <span class="constant">Post</span>.published</div><div class="line">    <span class="keyword">when</span> <span class="string">'Bad User'</span></div><div class="line">      <span class="constant">Post</span>.none   <span class="comment"># returns ActiveRecord::Relation</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>controllers/posts_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">...</span></div><div class="line">@posts = current_user.visible_posts</div><div class="line">@posts.recent</div></pre></td></tr></table></figure>

<p><code>@posts.recent</code> 有可能會回傳下列三種：<br>    Post.where(country: country).recent<br>    Post.published.recent<br>    Post.none.recent</p>
<p>Post.none 不會使用到 database，並且會回傳 ActiveRecord::Relation，且後續再 chain 其他 method 比如 <code>recent</code> 的時候，都會是 empty collection。</p>
<h2 id="RELATION#NOT">RELATION#NOT</h2>
<p>在 Rails 3 當中，有時候會想要撈出 “非”某個 user 的 posts，通常會這樣寫：<br>    Post.where(‘author != ?’, author)</p>
<p>但是當 author 為 nil 的時候，就會產生出錯誤的 query ：<br>    SELECT “posts”.* FROM “posts” WHERE (author != NULL)  # incorrect SQL syntax</p>
<p>所以往往會多加一些條件式來避免產生錯誤的 query：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> author</div><div class="line">  Post.where(<span class="attribute">'author</span> != ?', author)</div><div class="line"><span class="keyword">else</span></div><div class="line">  Post.where(<span class="attribute">'author</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>')</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><br>太麻煩了…<br><br>Rails 4 提供新的寫法，只要一行就可以解決：<br>    Post.where.not(author: author)<br><br>會自動產生：<br>    SELECT “posts”.* FROM “posts” WHERE (author IS NOT NULL)<br><br>## RELATION#ORDER<br><br>假設我們有個 User model，裡頭有一個 default_scope：<br><figure class="highlight"><figcaption><span>models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  default_scope { order(<span class="symbol">:name</span>) }</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>然後在某個地方又使用了一次 <code>order</code>：<br>    User.order(“created_at DESC”)</p>
<p>猜猜看哪個 <code>order</code> 會先被執行？  </p>
<p>在 Rails 3 當中，會先針對 name 進行排序：<br>    SELECT * FROM users ORDER BY name asc, created_at DESC</p>
<p>順序是越後面（越新）使用的 <code>order</code> 會往後加。  </p>
<p>但是在 Rails 4 則剛好相反，後來使用的 <code>order</code> 其順序反而會越前面：<br>    SELECT * FROM users ORDER BY created_at DESC, name asc</p>
<h3 id="more_about_RELATION#ORDER">more about RELATION#ORDER</h3>
<p>在 Rails 3，反向排序的寫法是：<br>    User.order(‘created_at DESC’)</p>
<p>但是在 Rails 4 當中，<code>DESC</code> 可以改用 hash：<br>    User.order(created_at: :DESC)</p>
<p>如果要多個 <code>order</code> 的話，可以這樣寫：<br>    User.order(:name, created_at: :desc)</p>
<p>這樣會產生：<br>    SELECT * FROM users ORDER BY name asc, created_at DESC<br>(<code>order</code> 預設為 <code>asc</code>)</p>
<h2 id="RELATION#REFERENCES">RELATION#REFERENCES</h2>
<p>在 Rails 3 當中假設一個情境：<br>    Post.includes(:comments).where(“comments.name = ‘foo’”)<br><code>Post</code> 針對 <code>comments</code> 使用 eager loading，並想要撈出 comments.name 為 foo 的 string。<br>這樣的寫法在 Rails 4 已經被摒棄掉了，原因在於 Rails 必須深入到 SQL string 當中來確認參照了什麼 table，這種寫法被認為難以理解且很容易出錯。<br>Rails 4 裡，必須要明確地寫出是參照哪個 table：<br>    Post.includes(:comments).where(“comments.name = ‘foo’”).references(:comments)</p>
<p>但在某些情況下是不用加 <code>references</code> 的，比如 condition 是以 hash 的形式來下：<br>    Post.includes(:comments).where(comments: { name: ‘foo’} )<br>    Post.includes(:comments).where(‘comments.name’ =&gt; ‘foo’)</p>
<p>或是純粹排序也不用：<br>    Post.includes(:comments).order(‘comments.name’)</p>
<h2 id="ACTIVEMODEL::MODEL">ACTIVEMODEL::MODEL</h2>
<p>在 Rails 3 裡，我們可以使用 active model 把任何 Ruby class 所產生的 objects 變成 active record object，且不需要任何對應的 database table。比如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SupportTicket</span></span></div><div class="line">  <span class="keyword">include</span> <span class="constant">ActiveModel::Conversion</span></div><div class="line">  <span class="keyword">include</span> <span class="constant">ActiveModel::Validations</span></div><div class="line">  extend <span class="constant">ActiveModel::Naming</span></div><div class="line"></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:title</span>, <span class="symbol">:description</span></div><div class="line"></div><div class="line">  validates_presence_of <span class="symbol">:title</span></div><div class="line">  validates_presence_of <span class="symbol">:description</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>透過 mixed-in ActiveModel 的 module，就可以變成 active record object 出現在 <code>form_helper</code>：<br>    form_for(@support_ticket) do |f|<br>      …<br>    end</p>
<p>或是類似 ActiveRecord model：<br>    SupportTicket.new(support_params)<br>    @support_ticket.valud?<br>    @support_ticket.errors<br>    @support_ticket.to_param</p>
<p>在 Rails 4 裡，mixed-in 的寫法可以簡化成一段即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SupportTicket</span></span></div><div class="line">  <span class="keyword">include</span> <span class="constant">ActiveModel::Model</span></div><div class="line"></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:title</span>, <span class="symbol">:description</span></div><div class="line"></div><div class="line">  validates_presence_of <span class="symbol">:title</span></div><div class="line">  validates_presence_of <span class="symbol">:description</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p><code>Model</code> 這個 module 就包含了 Rails 3 寫法的那些東東：</p>
<figure class="highlight"><figcaption><span>activemodel/lib/active_model/model.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.includes(base)  base.class_eval </span><span class="keyword">do</span></div><div class="line">    extend <span class="constant">ActiveModel:</span><span class="symbol">:Naming</span></div><div class="line">    extend <span class="constant">ActiveModel:</span><span class="symbol">:Translation</span></div><div class="line">    <span class="keyword">include</span> <span class="constant">ActiveModel:</span><span class="symbol">:Validations</span></div><div class="line">    <span class="keyword">include</span> <span class="constant">ActiveModel:</span><span class="symbol">:Conversion</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>source: <a href="http://codeschool.com" target="_blank" rel="external">CodeSchool</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Rails 4]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails 4(2)]]></title>
    <link href="http://yoursite.com/blog/2013/05/31/rails-4-2/"/>
    <id>http://yoursite.com/blog/2013/05/31/rails-4-2/</id>
    <published>2013-05-31T05:05:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>紀錄 Rails 3 to Rails 4 的一些改變。<br><a id="more"></a></p>
<h2 id="FINDERS">FINDERS</h2>
<p>在 Rails 3 當中，old-style finders 的寫法已經被摒棄了：<br>    Post.find(:all, conditions: { author: ‘admin’ })  # deprecated</p>
<p>在 Rails 4 裡，比較正確的寫法應該是：<br>    Post.where(author: ‘admin’)</p>
<h3 id="FIND_BY">FIND_BY</h3>
<p>此外，Dynamic find_by finders 也被摒棄掉了：<br>    Post.find_by_title(‘Rails 4’, conditions: { author: ‘admin’ })  # deprecated</p>
<p>在 Rails 4 裡，要寫成：<br>    Post.find_by(title: ‘Rails 4’, author: ‘admin’)</p>
<p>或是寫成另一種比較好維護的寫法：<br>    post_params = { title: ‘Rails 4’, author: ‘admin’ }<br>    Post.find_by(post_params)</p>
<h4 id="more_about_FIND_BY">more about FIND_BY</h4>
<p>更進一步查看 <code>find_by</code> 的實作方式：</p>
<figure class="highlight"><figcaption><span>/activerecord/lib/active_record/relation/finder_methods.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def find_by(*args)</div><div class="line">  <span class="keyword">where</span>(*args).<span class="keyword">take</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>會發現 <code>find_by</code> 只是將 <code>where</code> method 給包起來而已。因此，<code>find_by</code> 也接受 <code>where</code> 的 arguents：<br>    Post.find_by(“publicshed_on &lt; ?”, 2.weeks.ago)</p>
<h3 id="FINDOR*">FIND<em>OR</em>*</h3>
<p>同樣地，動態新增 objects 的 <code>find_or_*</code> 寫法也有改變：<br>    Post.find_or_initialize_by_title(‘Rails 4’)  # deprecated<br>    Post.find_or_create_by_title(‘Rails 4’)  # deprecated</p>
<p>在 Rails 4 當中，要改為：<br>    Post.find_or_initialize_by(title: ‘Rails 4’)<br>    Post.find_or_create_by(title: ‘Rails 4’)</p>
<h4 id="more_about_FINDOR*">more about FIND<em>OR</em>*</h4>
<p>動態新增 objects 還有另一種寫法：<br>    Post.where(title: ‘Rails 4’).find_or_create</p>
<p>意思就是，如果找不到這個 Post，就會新增一個：<br>    Post.where(title: ‘Rails 4’).create</p>
<p>但是並不建議這種寫法，因為如果有針對 <code>create</code> 寫了任何 callback 的話，就會導致一連串不必要的 query 產生。<br>比如：</p>
<figure class="highlight"><figcaption><span>/model/post.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Post &lt; ActiveRecord::Base</div><div class="line">  after_create :foo</div><div class="line"></div><div class="line">  def foo</div><div class="line">    posts = Post.where(author: <span class="string">'adin'</span>)</div><div class="line">    <span class="keyword">...</span></div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>

<p>會產生這樣的 query：<br>    SELECT “posts”.* FROM “posts” WHERE “posts”.”title” = ‘Rails 4’ AND “posts”.”author” = ‘admin’…</p>
<p>明顯不是我們想要的。  </p>
<p>基於上述原因，Rails 4 才會使用 <code>find_or_create_by</code>：<br>    Post.find_or_create_by(title: ‘Rails 4’)</p>
<p>這樣一來，如果找不到這個 Post，就只會新增一個：<br>    Post.create(title: ‘Rails 4’)</p>
<p>產生的 query 會乾淨得多：<br>    SELECT “posts”.* FROM “posts” WHERE “posts”.”author” = ‘admin’</p>
<p>如果仍然想使用舊的 finders 寫法也不用擔心，這些寫法都包在 activerecord-deprecated_finders 這個 gem 裡頭了。</p>
<h2 id="UPDATE">UPDATE</h2>
<p>在 Rails 3 當中，通常會使用下列的方法來進行 update：<br>    @post.update_attributes(post_params)</p>
<pre><code><span class="variable">@post</span>.update_attribute(<span class="symbol">:title</span>, <span class="string">'Rails 4'</span>) <span class="comment"># might be deprecated in the future</span>
<span class="variable">@post</span>.update_column(<span class="symbol">:title</span>, <span class="string">'Rails 4'</span>) <span class="comment"># might be deprecated in the future</span>
</code></pre><p>主要差別在於下面兩個在 update 的過程不會進行 validate。  </p>
<p>而在 Rails 4 裡，比較恰當的寫法是：<br>    @post.update(post_params)</p>
<pre><code><span class="variable">@post</span>.update_columns(post_params)
</code></pre><p>這兩個的差別也是在於 <code>update_columns</code> 會直接產生 SQL statement 並對 database 執行，也就是會 skip validation。</p>
<h2 id="MODEL-ALL">MODEL.ALL</h2>
<p>在 Rails 3 當中，通常在 index action 裡面會使用 <code>scoped</code> 先產生一個 active relation object，然後再 chain 其他的 method：</p>
<figure class="highlight"><figcaption><span>controllers/tweets_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> </span>index</div><div class="line">  <span class="variable">@tweets</span> = <span class="constant">Tweet</span>.scoped</div><div class="line">  <span class="keyword">if</span> params[<span class="symbol">:recent</span>]</div><div class="line">    <span class="variable">@tweets</span> = <span class="variable">@tweets</span>.recent  <span class="comment"># dynamic conditions</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>但在 Rails 4 裡，<code>scoped</code> 已經被摒棄掉，而改用 <code>all</code> 了：</p>
<figure class="highlight"><figcaption><span>controllers/tweets_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> </span>index</div><div class="line">  <span class="variable">@tweets</span> = <span class="constant">Tweet</span>.all  <span class="comment">#chainable</span></div><div class="line">  <span class="keyword">if</span> params[<span class="symbol">:recent</span>]</div><div class="line">    <span class="variable">@tweets</span> = <span class="variable">@tweets</span>.recent  <span class="comment"># dynamic conditions</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>source: <a href="http://codeschool.com" target="_blank" rel="external">CodeSchool</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Rails 4]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails 4]]></title>
    <link href="http://yoursite.com/blog/2013/05/30/rails-4/"/>
    <id>http://yoursite.com/blog/2013/05/30/rails-4/</id>
    <published>2013-05-30T13:22:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>紀錄 Rails 3 to Rails 4 的一些改變。<br><a id="more"></a></p>
<h2 id="MATCH_ROUTES">MATCH ROUTES</h2>
<p>以往 Rails 3 的 <code>match</code> 寫法：<br>    match ‘/items/:id/purchase’, to: ‘items#purchase’<br>因為語意不清，不知道是 put、get、post 或 delete 等 HTTP method，且容易遭受 XSS 攻擊，因此在 Rails 4 會要求指定 HTTP method，否則就會造成 RuntimeError。<br>假設我們要指定 <code>post</code> HTTP method，就要寫成：<br>    post ‘/items/:id/purchase’, to: ‘items#purchase’<br>或是<br>    match ‘/items/:id/purchase’, to: ‘items#purchase’, via: :post<br>如果真的是要指定所有 HTTP method 的話，就寫成：<br>    match ‘/items/:id/purchase’, to: ‘items#purchase’, via: :all</p>
<h2 id="PATCH_VERB">PATCH VERB</h2>
<p>Rails 3 對應 update 動作的 HTTP method 只有 <code>PUT</code>。<code>PUT</code> 會傳遞整個 resource 來進行 update，但如果只想要 update resource 的某些 attribute，這樣就造成浪費了。<br>Rails 4 使用 <code>PATCH</code> 來解決此一需求。（在 HTTP 1.1 的時候就有這個 method 了）  </p>
<p>可惜的是，並非所有瀏覽器都支援 <code>PATCH</code> method，Rails 4 提供了折衷辦法：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">form_for(@item) do |f|</div><div class="line">  <span class="keyword">...</span></div><div class="line">end</div></pre></td></tr></table></figure>

<p>會產生</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"/items/20"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    &lt;input name=<span class="string">"utf8"</span> <span class="keyword">type</span>=<span class="string">"hidden"</span> value=<span class="string">"&amp;#x2713;"</span> /&gt;</div><div class="line">    &lt;input name=<span class="string">"_method"</span> <span class="keyword">type</span>=<span class="string">"hidden"</span> value=<span class="string">"patch"</span> /&gt;</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>

<p>Rails 4 在 form 上面仍然使用 <code>post</code> method，但裡頭多了一個 hidden 來指定 <code>patch</code> method。這樣一來就能支援所有瀏覽器，而 Rails 自己也能根據 hidden field 的 value 瞭解到這是 <code>patch</code> method。  </p>
<p>此外，在 test 當中也新增了 <code>patch</code> method：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test <span class="string">"updates item with PATCH"</span> <span class="built_in">do</span></div><div class="line">  patch :update, id: @<span class="keyword">item</span>,</div><div class="line">    <span class="keyword">item</span>: { description: @<span class="keyword">item</span>.description }</div><div class="line">  assert_redirected_to item_url(@<span class="keyword">item</span>)</div><div class="line"><span class="function"><span class="keyword">end</span></span></div></pre></td></tr></table></figure>

<h2 id="CONCERNS">CONCERNS</h2>
<p>在 route 裡頭有時候會遇到同樣的 resources 出現好幾次，比如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">resources <span class="symbol">:messages</span> <span class="keyword">do</span></div><div class="line">  resources <span class="symbol">:comments</span></div><div class="line">  resources <span class="symbol">:categories</span></div><div class="line">  resources <span class="symbol">:tags</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">resources <span class="symbol">:posts</span> <span class="keyword">do</span></div><div class="line">  resources <span class="symbol">:comments</span></div><div class="line">  resources <span class="symbol">:categories</span></div><div class="line">  resources <span class="symbol">:tags</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">resources <span class="symbol">:items</span> <span class="keyword">do</span></div><div class="line">  resources <span class="symbol">:comments</span></div><div class="line">  resources <span class="symbol">:categories</span></div><div class="line">  resources <span class="symbol">:tags</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>遇到這種情形時，可以用 <code>concern</code> 包起來，並給定一個名字（sociable）以便維護：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">concern <span class="symbol">:sociable</span> <span class="keyword">do</span></div><div class="line">  resources <span class="symbol">:comments</span></div><div class="line">  resources <span class="symbol">:categories</span></div><div class="line">  resources <span class="symbol">:tags</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">resources <span class="symbol">:messages</span>, <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div><div class="line">resources <span class="symbol">:posts</span>,    <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div><div class="line">resources <span class="symbol">:items</span>,    <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div></pre></td></tr></table></figure>

<p><code>concern</code> 也可以傳入參數，比如只要讓 sociable 可以在 items 底下 create：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">concern <span class="symbol">:sociable</span> <span class="keyword">do</span> |options|</div><div class="line">  resources <span class="symbol">:comments</span>, options</div><div class="line">  resources <span class="symbol">:categories</span>, options</div><div class="line">  resources <span class="symbol">:tags</span>, options</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">resources <span class="symbol">:messages</span>, <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div><div class="line">resources <span class="symbol">:posts</span>,    <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div><div class="line">resources <span class="symbol">:items</span> <span class="keyword">do</span></div><div class="line">  concerns <span class="symbol">:sociable</span>, <span class="symbol">only:</span> <span class="symbol">:create</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p><code>concern</code> 甚至可以抽出來包成 object。要注意的是，這個 object 必須能夠 respond_to <code>call</code>：</p>
<figure class="highlight"><figcaption><span>app/concerns/sociable.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sociable</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.call(mapper, options)</div><div class="line">    mapper.resources <span class="symbol">:comments</span>, options</div><div class="line">    mapper.resources <span class="symbol">:categories</span>, options</div><div class="line">    mapper.resources <span class="symbol">:tags</span>, options</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">concern <span class="symbol">:sociable</span>, <span class="constant">Sociable</span></div><div class="line"></div><div class="line">resources <span class="symbol">:messages</span>, <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div><div class="line">resources <span class="symbol">:posts</span>,    <span class="symbol">concerns:</span> <span class="symbol">:sociable</span></div><div class="line">resources <span class="symbol">:items</span> <span class="keyword">do</span></div><div class="line">  concerns <span class="symbol">:sociable</span>, <span class="symbol">only:</span> <span class="symbol">:create</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h2 id="TREAD-SAFETY">TREAD-SAFETY</h2>
<p>在 Rails 3 當中，thread safety 預設是被關掉的：</p>
<figure class="highlight"><figcaption><span>config/environments/production.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyApp::Application.configure <span class="built_in">do</span></div><div class="line">  <span class="comment"># Enable threaded mode</span></div><div class="line">  <span class="comment"># config.threadsafe!</span></div><div class="line"><span class="function"><span class="keyword">end</span></span></div></pre></td></tr></table></figure>

<p>而在 Rails 4 裡，thread safety 預設是打開的，上面兩個設定也被拿掉，並且另外加入了兩個設定：</p>
<figure class="highlight"><figcaption><span>config/environments/production.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyApp::Application.configure <span class="built_in">do</span></div><div class="line">  config.cache_classes = <span class="constant">true</span></div><div class="line">  config.eager_load = <span class="constant">true</span></div><div class="line"><span class="function"><span class="keyword">end</span></span></div></pre></td></tr></table></figure>

<p>第一個設定是確保 class 在兩個 requests 之間，不會被 reload，並確保 middleware stack 沒有包含 Rack::Lock，這樣一來，threads 就不會被 lock 住了。<br>另一個設定則是讓新的 threads 建立之前，所有的 code 都已經被 load 完畢以供我們使用。  </p>
<p>為了盡可能讓 multi-threaded 表現更好，可以使用 <a href="http://puma.io/" target="_blank" rel="external">Puma</a>。<br>對於 multi-threaded server 的選擇，<a href="http://ruby-china.org/topics/10832" target="_blank" rel="external">這篇</a> 文章有不錯的講解。</p>
<p>source: <a href="http://codeschool.com" target="_blank" rel="external">CodeSchool</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Rails 4]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rails Deploy 基礎教學]]></title>
    <link href="http://yoursite.com/blog/2013/03/07/rails-deploy-ji-chu-jiao-xue/"/>
    <id>http://yoursite.com/blog/2013/03/07/rails-deploy-ji-chu-jiao-xue/</id>
    <published>2013-03-07T02:49:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>Using nginx, Unicorn, MySQL, rbenv and Capistrano.<br><a id="more"></a></p>
<h2 id="設置主機環境">設置主機環境</h2>
<p>這邊的主機是以 linode 的 Ubuntu 12.04 LTS 64bit 作示範。  </p>
<p>一開始先用 ssh 連到主機：</p>
<pre><code><span class="variable">$ </span>ssh root<span class="variable">@xxx</span>.xxx.xxx.xxx  <span class="comment"># xxx 為主機的 ip</span>
</code></pre><p>進去之後，目前的身份會是 <code>root</code>。</p>
<p>接著將系統的套件升級：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get update</span>
</code></pre><p>然後安裝必要套件：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get -y install curl git-core python-software-properties</span>
</code></pre><h3 id="安裝_nginx">安裝 nginx</h3>
<p>再來要安裝 nginx，我們可以用 <code>apt-get</code> 的方式來安裝 nginx，但是這樣版本會過舊。<br>為了避免版本過舊，我們可以新增一個新的 repository（版本會是比較近期的）：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># add-apt-repository ppa:nginx/stable</span>
</code></pre><p>接著再輸入以下指令，就可以使用 <code>apt-get</code> 的方式來安裝 nginx：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get update</span>
root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get -y install nginx</span>
</code></pre><p>安裝完畢之後，就可以啓動 nginx 了：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># service nginx start</span>
<span class="constant">Starting</span> <span class="symbol">nginx:</span> nginx.
</code></pre><p>我們可以在瀏覽器輸入主機的 ip，這時候可以看到畫面顯示：<code>Welcome to nginx!</code>，就表示成功啓動 nginx 了。<br>（如果有出現 <code>nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)</code> 錯誤的話，請看文章最底下 <code>nginx binding issue</code>。）</p>
<h3 id="安裝_MySQL">安裝 MySQL</h3>
<p>輸入以下指令來安裝 MySQL：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get install -y mysql-server libmysqlclient-dev</span>
</code></pre><p>過程中會要求輸入身份為 <code>root</code> 的 MySQL 密碼。  </p>
<p>安裝完成之後，要進入 mySQL 設定個別權限：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># mysql -u root -p</span>
<span class="constant">Enter</span> <span class="symbol">password:</span>
</code></pre><p>接著針對我們的 Rails application 建立 <code>demo</code> user以及 database：</p>
<pre><code><span class="input"><span class="prompt">mysql&gt;</span> create user demo<span class="variable">@localhost</span> identified by <span class="string">'secret'</span>;
<span class="constant">Query</span> <span class="constant">OK</span>, <span class="number">0</span> rows affected (<span class="number">0</span>.<span class="number">01</span> sec)</span>
<span class="input"><span class="prompt">mysql&gt;</span> create database demo_production;
<span class="constant">Query</span> <span class="constant">OK</span>, <span class="number">0</span> rows affected (<span class="number">0</span>.<span class="number">01</span> sec)</span>
<span class="input"><span class="prompt">mysql&gt;</span> grant all privileges on demo_production.* to demo<span class="variable">@localhost</span></span>
<span class="input"><span class="prompt">Query OK, 0 rows affected (0.01 sec)
mysql&gt;</span> exit</span>
</code></pre><h3 id="安裝_Postfix_and_Node-js">安裝 Postfix and Node.js</h3>
<p>如果要讓 application 能夠寄信，可以安裝 Postfix：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get install -y postfix</span>
</code></pre><p>過程中選擇預設的 “Internet Site” 以及預設的 “System mail name” 即可。  </p>
<p>接著安裝 node.js。這樣一來，主機就可以執行 Javascript 來協助處理 application 中的 asset pipeline。</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># add-apt-repository ppa:chris-lea/node.js</span>
root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get update</span>
root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># apt-get -y install nodejs</span>
</code></pre><h3 id="安裝_Ruby">安裝 Ruby</h3>
<p>在安裝 Ruby 之前，我們先建立一個新的 user 叫做 <code>deployer</code>（先前都是以 <code>root</code> 的身份執行）。<br>首先建立一個 group 名為 <code>admin</code>，接著把 <code>root</code> 拉進去：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># groupadd admin</span>
root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># usermod -g admin root</span>
</code></pre><p>然後新增 <code>deployer</code> user，並將其加到 <code>admin</code> group 裡面，這樣一來，<code>deployer</code> 就有了 sudo 的權限：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># adduser deployer --ingroup admin</span>
</code></pre><p>過程中會要你輸入 <code>deployer</code> 的密碼，其他設定則是保留預設值。<br>接著把身份換到 <code>deployer</code>，並跳到 home 資料夾：</p>
<pre><code>root<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="comment"># su deployer</span>
<span class="constant">To </span>run a command as administrator (user <span class="string">"root"</span>), <span class="keyword">use</span> <span class="string">"sudo &lt;command&gt;"</span>.
<span class="constant">See </span><span class="string">"man sudo_root"</span> <span class="keyword">for</span> details.

deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:/root</span><span class="variable">$ </span>cd ~
</code></pre><p>這邊使用 <a href="https://github.com/fesplugas/rbenv-installer" target="_blank" rel="external">rbenv-installer</a> 來安裝 ruby，手續會比較簡便。  </p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/raw.github.com/fesplugas</span><span class="regexp">/rbenv-installer/master</span><span class="regexp">/bin/rbenv</span>-installer | bash
</code></pre><p>安裝過程最後會出現一段 code（code 可能會因主機不同而有差異），要把這段加到 <code>.bashrc</code> 檔案當中：</p>
<pre><code><span class="keyword">export</span> RBENV_ROOT=<span class="string">"<span class="variable">${HOME}</span>/.rbenv"</span>

<span class="keyword">if</span> [ <span class="operator">-d</span> <span class="string">"<span class="variable">${RBENV_ROOT}</span>"</span> ]; <span class="keyword">then</span>
  <span class="keyword">export</span> PATH=<span class="string">"<span class="variable">${RBENV_ROOT}</span>/bin:<span class="variable">${PATH}</span>"</span>
  <span class="built_in">eval</span> <span class="string">"<span class="variable">$(rbenv init -)</span>"</span>
<span class="keyword">fi</span>
</code></pre><p>接下來用 Vim 打開 <code>.bashrc</code> 檔：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>vim ~<span class="regexp">/.bashrc</span>
</code></pre><p>然後找到其中一段：</p>
<figure class="highlight"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># If not running interactively, don't do anything</span></div><div class="line">[ -z <span class="string">"<span class="variable">$PS1</span>"</span> ] &amp;&amp; <span class="keyword">return</span></div></pre></td></tr></table></figure>

<p>這段的意思是如果不在 interactive shell 狀態就停止執行，因此我們要在這之前就先讀進 rbenv 才可以使用 Capistano。  </p>
<p>把剛剛 rbenv-installer 安裝程序最後出現的 code 加到這段上面：</p>
<figure class="highlight"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> RBENV_ROOT=<span class="string">"<span class="variable">${HOME}</span>/.rbenv"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="string">"<span class="variable">${RBENV_ROOT}</span>"</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="keyword">export</span> PATH=<span class="string">"<span class="variable">${RBENV_ROOT}</span>/bin:<span class="variable">${PATH}</span>"</span></div><div class="line">  <span class="built_in">eval</span> <span class="string">"<span class="variable">$(rbenv init -)</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># If not running interactively, don't do anything</span></div><div class="line">[ -z <span class="string">"<span class="variable">$PS1</span>"</span> ] &amp;&amp; <span class="keyword">return</span></div></pre></td></tr></table></figure>

<p>將 <code>.bashrc</code> 存檔了之後，要再 reload 一次：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>. ~<span class="regexp">/.bashrc</span>
</code></pre><p>這樣一來，就可以使用 <code>rbenv</code> command 了。我們接著輸入以下指令，它會安裝 Ruby 相依的 packages：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>rbenv bootstrap-ubuntu-<span class="number">12</span>-<span class="number">04</span>
</code></pre><p>再來根據 <a href="https://github.com/fesplugas/rbenv-installer" target="_blank" rel="external">rbenv-installer</a> 安裝最新版的 Ruby：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>rbenv install <span class="number">1.9</span>.<span class="number">3</span>-p374
</code></pre><p>經過大概一碗泡麵的時間就可以安裝完成。接著將其設定為預設的 Ruby 版本：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>rbenv global <span class="number">1.9</span>.<span class="number">3</span>-p374
deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>ruby -v
ruby <span class="number">1.9</span>.<span class="number">3</span>p374 (<span class="number">2013</span>-<span class="number">01</span>-<span class="number">15</span> revision <span class="number">38858</span>) [x86_64-linux]
</code></pre><p>最後要安裝 Bundler，然後執行 <code>rbenv rehash</code> 就可以使用 <code>bundle</code> command 了：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>gem install bundler --no-ri --no-rdoc
deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>rbenv rehash
deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>bundle -v
<span class="constant">Bundler</span> version <span class="number">1.2</span>.<span class="number">4</span>
</code></pre><h2 id="Application_設定">Application 設定</h2>
<p>現在回到我們的電腦上面，這邊假設我們的 application 已經有對應到 Github 上面的 repository，僅針對部分需要注意的地方稍微提一下。  </p>
<h4 id="ignore_database-yml">ignore database.yml</h4>
<p>我們會將 database 的帳號密碼放在 <code>database.yml</code> 底下，為了避免在 Github 上面公開，因此應該把 <code>database.yml</code> 加到 <code>.gitignore</code> 當中，並且在主機上面手動設定 <code>database.yml</code> 檔。</p>
<figure class="highlight"><figcaption><span>/.gitignore</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># See http://<span class="operator"><span class="keyword">help</span>.github.com/<span class="keyword">ignore</span>-files/ <span class="keyword">for</span> more about ignoring files.</span></div><div class="line">#</div><div class="line"># <span class="keyword">If</span> you find yourself ignoring <span class="keyword">temporary</span> files generated <span class="keyword">by</span> your <span class="built_in">text</span> editor</div><div class="line"># <span class="keyword">or</span> operating system, you probably want <span class="keyword">to</span> <span class="keyword">add</span> a <span class="keyword">global</span> <span class="keyword">ignore</span> instead:</div><div class="line">#   git config <span class="comment">--global core.excludesfile ~/.gitignore_global</span></div><div class="line"></div><div class="line"># <span class="keyword">Ignore</span> bundler config</div><div class="line">/.bundle</div><div class="line"></div><div class="line"># <span class="keyword">Ignore</span> the <span class="keyword">default</span> SQLite <span class="keyword">database</span>.</div><div class="line">/db<span class="comment">/*.sqlite3</span></div><div class="line"></div><div class="line"># Ignore all logfiles and tempfiles.</div><div class="line">/log/*.log</div><div class="line">/tmp</div><div class="line"></div><div class="line">/config/database.yml</div></pre></td></tr></table></figure>

<p>為了方便在主機上面手動設定 <code>database.yml</code>，我們可以先複製一份範本，之後再拿來改：</p>
<pre><code>$ <span class="keyword">cp</span> config/database.yml config/database.example.yml
</code></pre><h2 id="Deploy_with_Capistrano">Deploy with Capistrano</h2>
<p>這邊會使用 Capistrano 來進行 deploy。此外還會用到 Unicorn，因此我們要在 <code>Gemfile</code> 加上這兩個 gem：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># <span class="operator"><span class="keyword">Use</span> unicorn <span class="keyword">as</span> the app <span class="keyword">server</span></span></div><div class="line">gem <span class="string">'unicorn'</span></div><div class="line"></div><div class="line"># Deploy <span class="keyword">with</span> Capistrano</div><div class="line">gem <span class="string">'capistrano'</span></div></pre></td></tr></table></figure>

<p>記得要再執行 <code>bundle</code> 來安裝。  </p>
<p>接著執行 <code>capify .</code> 來設定 Capistrano，這個指令會產生兩個設定檔：</p>
<pre><code>$ capify .
[<span class="built_in">add</span>] writing <span class="string">'./Capfile'</span>
[<span class="built_in">add</span>] writing <span class="string">'./config/deploy.rb'</span>
[done] capified!
</code></pre><p>首先看到 <code>Capfile</code> 檔，第二行告訴我們如果使用 asset pipeline 的話就要反註解，而我們也的確會用到：</p>
<figure class="highlight"><figcaption><span>/Capfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">load</span> <span class="string">'deploy'</span></div><div class="line"><span class="comment"># Uncomment if you are using Rails' asset pipeline</span></div><div class="line"><span class="built_in">load</span> <span class="string">'deploy/assets'</span></div><div class="line"><span class="built_in">load</span> <span class="string">'config/deploy'</span> <span class="comment"># remove this line to skip loading any of the default tasks</span></div></pre></td></tr></table></figure>

<p>接下來看到 <code>deploy.rb</code> 檔，當中會有許多個人化的設定，因此這邊只會貼出幾項必要設定：</p>
<figure class="highlight"><figcaption><span>/config/deploy.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">"bundler/capistrano"</span></div><div class="line"></div><div class="line">server <span class="string">"xxx.xxx.xxx.xxx"</span>, <span class="symbol">:web</span>, <span class="symbol">:app</span>, <span class="symbol">:db</span>, <span class="symbol">primary:</span> <span class="keyword">true</span></div><div class="line"></div><div class="line">set <span class="symbol">:application</span>, <span class="string">"demo"</span></div><div class="line">set <span class="symbol">:user</span>, <span class="string">"deployer"</span></div><div class="line">set <span class="symbol">:deploy_to</span>, <span class="string">"/home/<span class="subst">#{user}</span>/apps/<span class="subst">#{application}</span>"</span></div><div class="line">set <span class="symbol">:deploy_via</span>, <span class="symbol">:remote_cache</span></div><div class="line">set <span class="symbol">:use_sudo</span>, <span class="keyword">false</span></div><div class="line"></div><div class="line">set <span class="symbol">:scm</span>, <span class="string">"git"</span></div><div class="line">set <span class="symbol">:repository</span>, <span class="string">"git@github.com:GGD/<span class="subst">#{application}</span>.git"</span></div><div class="line">set <span class="symbol">:branch</span>, <span class="string">"master"</span></div><div class="line"></div><div class="line">default_run_options[<span class="symbol">:pty</span>] = <span class="keyword">true</span></div><div class="line">ssh_options[<span class="symbol">:forward_agent</span>] = <span class="keyword">true</span></div><div class="line"></div><div class="line">after <span class="string">"deploy"</span>, <span class="string">"deploy:cleanup"</span> <span class="comment"># keep only the last 5 releases</span></div><div class="line"></div><div class="line">namespace <span class="symbol">:deploy</span> <span class="keyword">do</span></div><div class="line">  <span class="string">%w[start stop restart]</span>.each <span class="keyword">do</span> |command|</div><div class="line">    desc <span class="string">"<span class="subst">#{command}</span> unicorn server"</span></div><div class="line">    task command, <span class="symbol">roles:</span> <span class="symbol">:app</span>, <span class="symbol">except:</span> {<span class="symbol">no_release:</span> <span class="keyword">true</span>} <span class="keyword">do</span></div><div class="line">      run <span class="string">"/etc/init.d/unicorn_<span class="subst">#{application}</span> <span class="subst">#{command}</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  task <span class="symbol">:setup_config</span>, <span class="symbol">roles:</span> <span class="symbol">:app</span> <span class="keyword">do</span></div><div class="line">    sudo <span class="string">"ln -nfs <span class="subst">#{current_path}</span>/config/nginx.conf /etc/nginx/sites-enabled/<span class="subst">#{application}</span>"</span></div><div class="line">    sudo <span class="string">"ln -nfs <span class="subst">#{current_path}</span>/config/unicorn_init.sh /etc/init.d/unicorn_<span class="subst">#{application}</span>"</span></div><div class="line">    run <span class="string">"mkdir -p <span class="subst">#{shared_path}</span>/config"</span></div><div class="line">    put <span class="constant">File</span>.read(<span class="string">"config/database.example.yml"</span>), <span class="string">"<span class="subst">#{shared_path}</span>/config/database.yml"</span></div><div class="line">    puts <span class="string">"Now edit the config files in <span class="subst">#{shared_path}</span>."</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  after <span class="string">"deploy:setup"</span>, <span class="string">"deploy:setup_config"</span></div><div class="line"></div><div class="line">  task <span class="symbol">:symlink_config</span>, <span class="symbol">roles:</span> <span class="symbol">:app</span> <span class="keyword">do</span></div><div class="line">    run <span class="string">"ln -nfs <span class="subst">#{shared_path}</span>/config/database.yml <span class="subst">#{release_path}</span>/config/database.yml"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  after <span class="string">"deploy:finalize_update"</span>, <span class="string">"deploy:symlink_config"</span></div><div class="line"></div><div class="line">  desc <span class="string">"Make sure local git is in sync with remote."</span></div><div class="line">  task <span class="symbol">:check_revision</span>, <span class="symbol">roles:</span> <span class="symbol">:web</span> <span class="keyword">do</span></div><div class="line">    <span class="keyword">unless</span> `git rev-parse <span class="constant">HEAD</span>` == `git rev-parse origin/master`</div><div class="line">      puts <span class="string">"WARNING: HEAD is not the same as origin/master"</span></div><div class="line">      puts <span class="string">"Run `git push` to sync changes."</span></div><div class="line">      exit</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  before <span class="string">"deploy"</span>, <span class="string">"deploy:check_revision"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h2 id="Setup_Nginx/Unicorn_in_Rails_application">Setup Nginx/Unicorn in Rails application</h2>
<h3 id="Nginx">Nginx</h3>
<p>接下來要針對我們的 Rails application 進行 Nginx 設定，首先在 application 底下新增 <code>/config/nginx.conf</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="title">upstream</span> unicorn {</div><div class="line">  <span class="title">server</span> <span class="url">unix:/tmp/unicorn.demo.sock</span> fail_timeout=<span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="title">server</span> {</div><div class="line">  <span class="title">listen</span> <span class="number">80</span> default deferred;</div><div class="line">  <span class="comment"># server_name example.com;</span></div><div class="line">  <span class="title">root</span> /home/deployer/apps/demo/current/public;</div><div class="line"></div><div class="line">  <span class="title">location</span><span class="regexp"> ^~</span> /assets/ {</div><div class="line">    <span class="title">gzip_static</span> <span class="built_in">on</span>;</div><div class="line">    <span class="title">expires</span> max;</div><div class="line">    <span class="title">add_header</span> Cache-Control public;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="title">try_files</span> <span class="variable">$uri</span>/index.html <span class="variable">$uri</span> <span class="variable">@unicorn</span>;</div><div class="line">  <span class="title">location</span> <span class="variable">@unicorn</span> {</div><div class="line">    <span class="title">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    <span class="title">proxy_set_header</span> Host <span class="variable">$http_host</span>;</div><div class="line">    <span class="title">proxy_redirect</span> <span class="built_in">off</span>;</div><div class="line">    <span class="title">proxy_pass</span> <span class="url">http://unicorn</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="title">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">500</span>.html;</div><div class="line">  <span class="title">client_max_body_size</span> <span class="number">4G</span>;</div><div class="line">  <span class="title">keepalive_timeout</span> <span class="number">10</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>其中 <code>server</code> block 與 Apache 的 VirtualHost 類似。<br>第 1 ~ 3 行的 <code>upstream</code> block 告訴 nginx 要將動態網頁導到 Unicorn，這邊給定 <code>upstream</code> block 名為 unicorn，並使用 <code>server</code> 指向 Unix socket (對應底下的 Unicorn 設定)。<br>同時會將 <code>fail_timeout</code> 設定為 0，這樣如果 Rails application 無法回應且 Unicorn 已經 times out 時，nginx 才能夠正確處理。  </p>
<p>第 6 行告訴 server 要 <code>listen</code> port 80，並將其設定為 default，表示如果找不到 matching server name 的話就使用這個 server (可參考<a href="http://nginx.org/en/docs/http/request_processing.html" target="_blank" rel="external">這篇</a>)。deferred 則是會啓動 Ubuntu 的 <code>TCP_DEFER_ACCEPT</code> 設定 (可參考<a href="http://stackoverflow.com/questions/8449058/what-does-the-deferred-option-mean-in-nginxs-listen-directive" target="_blank" rel="external">這篇</a>)。  </p>
<p>第 7 行是如果有 domain name 的話，可以在此輸入。  </p>
<p>第 8 行的 <code>root</code> 則是告訴 nginx 這個 application 的 static files 在哪裡。  </p>
<p>第 10 行使用了 nginx 的 gzip_static module。在收到 request 後，會到 /assets/ 當中尋找 <code>.gz</code> 的壓縮檔。比如 <a href="http://www.example.com/stylesheets/homepage.css，nginx" target="_blank" rel="external">http://www.example.com/stylesheets/homepage.css，nginx</a> 就會先去找 /assets/stylesheets/homepage.css.gz 這個檔案，如果存在的話就直接回傳；如果不存在，就將 /assets/stylesheets/homepage.css 進行 gzip 壓縮之後再回傳，這樣就可以避免重複的壓縮動作。這個 module 會對所有 request 都有效，而一般來說，大部份的 request 都是屬於 dynamic 的，並不會有 <code>.gz</code>，所以建議將這個 module 指到含有 <code>.gz</code> 的靜態資料夾 /assets/ 比較恰當。  </p>
<p>第 16 行是告訴 nginx 去 try 這些 list 是否存在於剛剛設定的 root 當中，如果不存在的話，就會到 Rails application 去產生。比如找不到 <code>index.html</code> 的話，就會到 Rails application 產生；而 <code>$uri</code> 則是 user 傳過來的 URL。  </p>
<p>至於該如何找到 Rails application，就是要透過 named location 了，在這裡我們命名為 <code>@unicorn</code> (對應到第 17 行的 location command)。在 location command 當中，nginx 會透過 <code>proxy_pass</code> 把收到的 request 丟給 Unicorn server 來處理。  </p>
<p>第 21 行是告訴 nginx 要 <code>proxy_pass</code> 到 <code>http://unicorn</code> ，這樣就會指向到上面的 upstream block (記得要設定與上面的 upstream 名稱相同才行)。</p>
<p>第 24 行則是告訴 nginx 如果遇到 500, 502, 503, 504 錯誤的話，就顯示 Rails application 的 <code>500.html</code> 頁面。</p>
<h3 id="Unicorn">Unicorn</h3>
<p>接下來要設定 Unicorn，同樣也是在 Rails application 底下新增 <code>/config/unicorn.rb</code>：</p>
<figure class="highlight"><figcaption><span>/config/unicorn.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root = <span class="string">"/home/deployer/apps/demo/current"</span></div><div class="line">working_directory root</div><div class="line">pid <span class="string">"<span class="subst">#{root}</span>/tmp/pids/unicorn.pid"</span></div><div class="line">stderr_path <span class="string">"<span class="subst">#{root}</span>/log/unicorn.log"</span></div><div class="line">stdout_path <span class="string">"<span class="subst">#{root}</span>/log/unicorn.log"</span></div><div class="line"></div><div class="line">listen <span class="string">"/tmp/unicorn.demo.sock"</span></div><div class="line">worker_processes <span class="number">2</span></div><div class="line">timeout <span class="number">30</span></div></pre></td></tr></table></figure>

<p>第 1, 2 行設定了 Rails application 的位置。<br>第 3 ~ 5 行則是設定了 pid 以及 log 的位置。<br>第 7 行告訴 Unicorn 要 listen 哪個 socket (或是改成 port 也可以，變成傳入數字)。<br>第 8 行是告訴 Unicorn 在 boot up 的時候，有多少個 Rails instances，最少應該要等於這台主機的 cpu 核心數(關於 <code>worker_precesses</code> 的調校可以看<a href="http://unicorn.bogomips.org/TUNING.html" target="_blank" rel="external">這篇</a>)。<br>第 9 行則是設定了 timeout 的時間，這邊是 30 秒。</p>
<p>最後，我們會使用 shell script 來啓動 Unicorn，方法一樣是新增一個檔案 <code>/config/unicorn_init.sh</code>，雖然這個檔案有很多設定，但其實我們只要動到最上面的設定就好：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/sh</span></div><div class="line"><span class="keyword">set</span> <span class="operator">-e</span></div><div class="line"></div><div class="line"><span class="comment"># Feel free to change any of the following variables for your app:</span></div><div class="line">TIMEOUT=<span class="variable">${TIMEOUT-60}</span></div><div class="line">APP_ROOT=/home/deployer/apps/demo/current</div><div class="line">PID=<span class="variable">$APP_ROOT</span>/tmp/pids/unicorn.pid</div><div class="line">CMD=<span class="string">"cd <span class="variable">$APP_ROOT</span>; bundle exec unicorn -D -c <span class="variable">$APP_ROOT</span>/config/unicorn.rb -E production"</span></div><div class="line">AS_USER=deployer</div><div class="line"><span class="keyword">set</span> -u</div><div class="line"></div><div class="line">OLD_PIN=<span class="string">"<span class="variable">$PID</span>.oldbin"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">sig</span></span> () {</div><div class="line">  test <span class="operator">-s</span> <span class="string">"<span class="variable">$PID</span>"</span> &amp;&amp; kill -<span class="variable">$1</span> `cat <span class="variable">$PID</span>`</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="title">oldsig</span></span> () {</div><div class="line">  test <span class="operator">-s</span> <span class="variable">$OLD_PIN</span> &amp;&amp; kill -<span class="variable">$1</span> `cat <span class="variable">$OLD_PIN</span>`</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="title">run</span></span> () {</div><div class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$(id -un)</span>"</span> = <span class="string">"<span class="variable">$AS_USER</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">eval</span> <span class="variable">$1</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    su -c <span class="string">"<span class="variable">$1</span>"</span> - <span class="variable">$AS_USER</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">  sig <span class="number">0</span> &amp;&amp; <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"Already running"</span> &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></div><div class="line">  run <span class="string">"<span class="variable">$CMD</span>"</span></div><div class="line">  ;;</div><div class="line">stop)</div><div class="line">  sig QUIT &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></div><div class="line">  <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"Not running"</span></div><div class="line">  ;;</div><div class="line">force-stop)</div><div class="line">  sig TERM &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></div><div class="line">  <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"Not running"</span></div><div class="line">  ;;</div><div class="line">restart|reload)</div><div class="line">  sig HUP &amp;&amp; <span class="built_in">echo</span> reloaded OK &amp;&amp; <span class="keyword">exit</span> <span class="number">0</span></div><div class="line">  <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"Couldn't reload, starting '<span class="variable">$CMD</span>' instead"</span></div><div class="line">  run <span class="string">"<span class="variable">$CMD</span>"</span></div><div class="line">  ;;</div><div class="line">upgrade)</div><div class="line">  <span class="keyword">if</span> sig USR2 &amp;&amp; sleep <span class="number">2</span> &amp;&amp; sig <span class="number">0</span> &amp;&amp; oldsig QUIT</div><div class="line">  <span class="keyword">then</span></div><div class="line">    n=<span class="variable">$TIMEOUT</span></div><div class="line">    <span class="keyword">while</span> test <span class="operator">-s</span> <span class="variable">$OLD_PIN</span> &amp;&amp; test <span class="variable">$n</span> -ge <span class="number">0</span></div><div class="line">    <span class="keyword">do</span></div><div class="line">      <span class="built_in">printf</span> <span class="string">'.'</span> &amp;&amp; sleep <span class="number">1</span> &amp;&amp; n=$(( <span class="variable">$n</span> - <span class="number">1</span> ))</div><div class="line">    <span class="keyword">done</span></div><div class="line">    <span class="built_in">echo</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> test <span class="variable">$n</span> <span class="operator">-lt</span> <span class="number">0</span> &amp;&amp; test <span class="operator">-s</span> <span class="variable">$OLD_PIN</span></div><div class="line">    <span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"<span class="variable">$OLD_PIN</span> still exists after <span class="variable">$TIMEOUT</span> seconds"</span></div><div class="line">      <span class="keyword">exit</span> <span class="number">1</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">exit</span> <span class="number">0</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line">  <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"Couldn't upgrade, starting '<span class="variable">$CMD</span>' instead"</span></div><div class="line">  run <span class="string">"<span class="variable">$CMD</span>"</span></div><div class="line">  ;;</div><div class="line">reopen-logs)</div><div class="line">  sig USR1</div><div class="line">  ;;</div><div class="line">*)</div><div class="line">  <span class="built_in">echo</span> &gt;&amp;<span class="number">2</span> <span class="string">"Usage: <span class="variable">$0</span> &lt;start|stop|restart|upgrade|force-stop|reopen-logs&gt;"</span></div><div class="line">  <span class="keyword">exit</span> <span class="number">1</span></div><div class="line">  ;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>

<p>然後要將這段 script 的權限設定為 executable：</p>
<pre><code>$ chmod +<span class="keyword">x</span> config/unicorn_init.<span class="keyword">sh</span>
</code></pre><p>記得要把這些設定加到 Git 裡：</p>
<pre><code><span class="variable">$ </span>git add .
<span class="variable">$ </span>git commit -m <span class="string">'Deployment config files'</span>
<span class="variable">$ </span>git push origin master
</code></pre><h2 id="Deploy">Deploy</h2>
<p>現在， 可以執行 <code>cap deploy:setup</code> 來 deploy 我們的 Rails application 了 (有些人可能會因為 shell 設定不同，需要在指令前面加上 <code>bundle exec</code>)，這個指令會以 deployer 的身份登入到 server。</p>
<pre><code><span class="variable">$ </span>cap <span class="symbol">deploy:</span>setup
</code></pre><p>這段指令會到 server 新增一些與 application 有關的資料夾，然後根據前面的設定，將 Nginx 與 Unicorn 設定到 server，再上傳 <code>database.yml</code>。我們接著要登入到     sever 來修改 <code>database.yml</code>：</p>
<pre><code><span class="variable">$ </span>ssh deployer<span class="variable">@xxx</span>.xxx.xxx.xxx
</code></pre><p>登入之後就進行修改：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>cd apps/demo/shared/config/
deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~/apps/demo/shared/config</span><span class="variable">$ </span>vim database.yml
</code></pre><p>我們只需要 production 環境設定，因此只要留下 <code>production</code> 部分就好：</p>
<figure class="highlight"><figcaption><span>/apps/demo/shared/config/database.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="label">production:</span></div><div class="line">  adapter: mysql2</div><div class="line">  database: demo_production</div><div class="line">  pool: <span class="number">5</span></div><div class="line">  username: demo</div><div class="line">  password: demo</div><div class="line">  host: localhost</div><div class="line">  encoding: utf8</div></pre></td></tr></table></figure>

<p>這是我們唯一需要登入到 server 修改的檔案，所以在修改完了之後就可以登出了。</p>
<h3 id="自動登入_Server">自動登入 Server</h3>
<p>每次使用 <code>ssh</code> 登入到 server 都需要輸入密碼是一件很麻煩的事，我們可以輸入以下指令來免除這個麻煩。這個指令會複製 public RSA 到 <code>deployers</code> authorized keys 當中。</p>
<pre><code><span class="variable">$ </span>cat ~<span class="regexp">/.ssh/id</span>_rsa.pub | ssh deployer<span class="variable">@xxx</span>.xxx.xxx.xxx <span class="string">'cat &gt;&gt; ~/.ssh/authorized_keys'</span>
</code></pre><p>另外我們還需要執行 <code>ssh-add</code> 讓 SSH Agent 能夠作用。在 Capistrano deployment 檔案當中有一行：</p>
<figure class="highlight"><figcaption><span>/config/deploy.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh_options[<span class="symbol">:forward_agent</span>] = <span class="keyword">true</span></div></pre></td></tr></table></figure>

<p>這行告訴 Capistrano 使用 local keys 而非 server keys。這行搭配 <code>ssh-add</code> 表示當我們 ssh 到 server 的時候，可以讓 server 存取 Github，並且無需再針對 server 設定一組 deploy key 到 Github 裡。  </p>
<p>如果是 Mac OSX 的話，我們還可以加上 <code>-K</code> 參數，這樣就可以把 passphrase 加到 keychain 裡。</p>
<pre><code><span class="variable">$ssh</span>-add -K
</code></pre><p>接著就可以 deploy 我們的 application 了：</p>
<pre><code><span class="variable">$ </span>cap <span class="symbol">deploy:</span>cold
</code></pre><p>cold deploy 表示要執行 database migrations 並且讓 server 保持在 start 狀態 (而非 restart)。<br>用 cold deploy 的原因在於，有時候第一次執行時會噴一堆錯誤，此時就可以看一下錯誤資訊趕快做修正。</p>
<h2 id="Configuring_Nginx">Configuring Nginx</h2>
<p>此時如果用 browser 拜訪我們的網站，會發現仍然是 “Welcome to nginx” 頁面，這是因為 nginx 預設的頁面還留著的緣故。所以我們要再次 ssh 到 server 裡，然後把預設的頁面拿掉並 restart nginx：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>sudo rm /etc/nginx/sites-enabled/default
[sudo] password <span class="keyword">for</span> <span class="symbol">deployer:</span>
deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>sudo service nginx restart
<span class="constant">Restarting</span> <span class="symbol">nginx:</span> nginx.
</code></pre><p>第一行指令是拿掉 symbolic link，這樣可以確保我們不會誤刪掉重要的檔案。  </p>
<p>同樣是在 server 當中，我們還要執行一段指令，讓 Unicorn 在 server restart 時候可以正確地啟動：</p>
<pre><code>deployer<span class="variable">@li460</span>-<span class="number">213</span><span class="symbol">:~</span><span class="variable">$ </span>sudo update-rc.d unicorn_demo defaults
</code></pre><p>這段指令當中，把我們的 service 名稱傳進去，這邊是 <code>unicorn_demo</code>，後面再接著 <code>defaults</code>。  </p>
<p>再次用 browser 拜訪網站，就可以看到我們的 Rails application 了。  </p>
<p>後續如果 application 有修改，只要將修改的部分 push 到 Github，然後執行 <code>cap deploy</code> 就會自動 deploy 了！</p>
<pre><code><span class="variable">$ </span>git commit -am <span class="string">'Fixing something'</span>
<span class="variable">$ </span>git push
<span class="variable">$ </span>cap deploy
</code></pre><hr>
<h3 id="Trouble_Shooting">Trouble Shooting</h3>
<h4 id="nginx_binding_issue">nginx binding issue</h4>
<p>到 <code>/etc/nginx/sites-enabled/</code> 資料夾底下有個 <code>default</code> 檔案，將其中一行：<br>    listen [::]:80 default_server;<br>給註解掉，再執行 <code>service nginx restart</code> 就可以了。</p>
]]></content>
    <summary type="html">
    <![CDATA[using nginx, Unicorn, MySQL, rbenv and Capistrano。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="deploy" scheme="http://yoursite.com/categories/Ruby-on-Rails/deploy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scss - variable]]></title>
    <link href="http://yoursite.com/blog/2013/01/23/scss-variable/"/>
    <id>http://yoursite.com/blog/2013/01/23/scss-variable/</id>
    <published>2013-01-23T04:58:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>Scss - variable。<br><a id="more"></a></p>
<h2 id="variable_type">variable type</h2>
<h4 id="Boolean">Boolean</h4>
<pre><code><span class="variable">$rounded</span>: <span class="literal">false</span>;
<span class="variable">$shadow</span>: <span class="literal">true</span>;
</code></pre><h4 id="Numbers_(可寫單位)">Numbers (可寫單位)</h4>
<pre><code><span class="variable">$rounded</span><span class="value">: <span class="number">4px</span>;</span>
<span class="variable">$line-height</span><span class="value">: <span class="number">1.5</span>;</span>
<span class="variable">$font-size</span><span class="value">: <span class="number">3rem</span>;</span>
</code></pre><h4 id="Colors">Colors</h4>
<pre><code><span class="variable">$base</span><span class="value">: purple;</span>
<span class="variable">$border</span><span class="value">: <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span>
<span class="variable">$shadow</span><span class="value">: <span class="hexcolor">#333</span>;</span>
</code></pre><h4 id="Strings">Strings</h4>
<pre><code><span class="variable">$header</span><span class="value">: <span class="string">'My Head'</span>;</span>
<span class="variable">$callout</span><span class="value">: Arial;</span>
<span class="variable">$message</span><span class="value">: <span class="string">"Oops..."</span>;</span>
</code></pre><h4 id="Lists">Lists</h4>
<pre><code><span class="variable">$authors</span><span class="value">: Mike, John, Tom;</span>
<span class="variable">$margin</span><span class="value">: <span class="number">40px</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">100px</span>;</span>
</code></pre><h4 id="Null">Null</h4>
<pre><code><span class="variable">$shadow</span>: <span class="keyword">null</span>;
</code></pre><h2 id="variable_scope">variable scope</h2>
<p>在 selector 裡頭改變 variable，global variable 也會隨之改變：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$<span class="tag">color-base</span>: <span class="id">#777777</span>;</div><div class="line"></div><div class="line"><span class="class">.sidebar</span> <span class="rules">{</span></div><div class="line">  <span class="rule">$<span class="attribute">color-base</span>:<span class="value"> <span class="hexcolor">#222222</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> $color-base</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">p</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> $color-base</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>產生：</p>
<figure class="highlight"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">.sidebar</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#222222</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">p</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#222222</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h2 id="#{$variable}">#{$variable}</h2>
<p>可以用 <code>#{variable}</code> 的方式來將變數套到 selectors, property names, 或是 strings：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$side</span><span class="value">: top;</span></div><div class="line"></div><div class="line"><span class="tag">sup</span> {</div><div class="line">  <span class="attribute">position</span><span class="value">: relative;</span></div><div class="line">  #{<span class="variable">$side</span>}<span class="value">: -<span class="number">0.5em</span>;</span>   <span class="comment">// 變成 top: -0.5em;</span></div><div class="line">}</div><div class="line"><span class="class">.callout-</span>#{<span class="variable">$side</span>} {   <span class="comment">// 變成 .callout-top</span></div><div class="line">  <span class="attribute">background</span><span class="value">: <span class="hexcolor">#777</span>;</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="!default">!default</h2>
<p>預設情況下，後來設定的變數會覆蓋掉先前的變數：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$title</span><span class="value">: <span class="string">'First Title'</span>;</span></div><div class="line"><span class="variable">$title</span><span class="value">: <span class="string">'Second Title'</span>;</span></div><div class="line"></div><div class="line"><span class="tag">h2</span><span class="pseudo">:before</span> {</div><div class="line">  <span class="attribute">content</span><span class="value">: <span class="variable">$title</span>;</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>產生：</p>
<figure class="highlight"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">h2</span><span class="pseudo">:before</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'Second Title'</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>但如果在設定變數後面新增 <code>!default</code>，就可以避免覆蓋掉先前的變數：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$title</span><span class="value">: <span class="string">'First Title'</span>;</span></div><div class="line"><span class="variable">$title</span><span class="value">: <span class="string">'Second Title'</span> !default;</span></div><div class="line"></div><div class="line"><span class="tag">h2</span><span class="pseudo">:before</span> {</div><div class="line">  <span class="attribute">content</span><span class="value">: <span class="variable">$title</span>;</span></div><div class="line">}</div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">h2</span><span class="pseudo">:before</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'First Title'</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[Scss - variable。]]>
    
    </summary>
    
      <category term="Scss" scheme="http://yoursite.com/categories/Scss/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scss 基本觀念]]></title>
    <link href="http://yoursite.com/blog/2013/01/22/scss-ji-ben-guan-nian/"/>
    <id>http://yoursite.com/blog/2013/01/22/scss-ji-ben-guan-nian/</id>
    <published>2013-01-21T16:13:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>紀錄 Scss 基本觀念。<br><a id="more"></a></p>
<h3 id="注解">注解</h3>
<p><code>// comments</code> 雙斜線在經過 Scss compile 之後，不會在 css 裡面顯示。<br><code>/* comments */</code> 單斜線經過 Scss compile 之後，仍會以 <code>/* comments */</code> 這種注解方式顯示於 css。</p>
<h3 id="@import_時機">@import 時機</h3>
<p>在 css 時，通常會避免使用 <code>@import</code>，因為browser 預設會同時下載多份 css（無法像排隊方式下載），必須等到所有 css 都下載完畢，頁面才會正確顯示，如此一來就會有 performance 問題。  </p>
<p>而在 Scss compile 時候，如果遇到 <code>@import</code>，就會一併把相關檔案也 compile 進去同一份 css，因此 client side 只要下載一份 compiled 過的 css 即可。</p>
<h3 id="避免產生只需要_@import_的_css">避免產生只需要 @import 的 css</h3>
<p>如果 application.scss 裡頭 @import 了一個 buttons.scss 檔案，那麼在 compile 之後，將會產生 application.css 與 buttons.css 兩個 css。問題是 application.css 裡頭已經 @import 了 buttons.css，而我們又不會在其他地方用到 buttons.css，這時該怎麼辦呢？<br>把只要用來 @import 的 scss 檔名改以底線開頭就可以了：<code>_buttons.scss</code>，這樣一來就不會產生 buttons.css 了。</p>
<h3 id="nesting_層數">nesting 層數</h3>
<p>最多 3 到 4 層；如果層數更多，就要考慮 refactor。</p>
<h3 id="nesting_properties">nesting properties</h3>
<p>除了一般的：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.content</span> {</div><div class="line">  <span class="attribute">border</span><span class="value">: <span class="number">1px</span> solid <span class="hexcolor">#ccc</span>;</span></div><div class="line">  <span class="tag">h2</span> {</div><div class="line">    <span class="attribute">font-size</span><span class="value">: <span class="number">3em</span>;</span></div><div class="line">  }</div><div class="line">  <span class="tag">p</span> {</div><div class="line">    <span class="attribute">font-size</span><span class="value">: <span class="number">1.5em</span>;</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>會產生：</p>
<figure class="highlight"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.content</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ccc</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.content</span> <span class="tag">h2</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">3em</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.content</span> <span class="tag">p</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">1.5em</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>nesting properties 還可以這樣用：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">.btn</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">text</span>:<span class="value"> {</span></span></div><div class="line">    decoration: underline;</div><div class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> lowercase</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>產生：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class">.btn</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> underline</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">text-transform</span>:<span class="value"> lowercase</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h3 id="&amp;_符號">&amp; 符號</h3>
<p>直接看程式碼：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.content</span> {</div><div class="line">  <span class="attribute">border</span><span class="value">: <span class="number">1px</span> solid <span class="hexcolor">#ccc</span>;</span></div><div class="line">  <span class="class">.callout</span> {</div><div class="line">    <span class="attribute">border-color</span><span class="value">: red;</span></div><div class="line">  }</div><div class="line">  &amp;<span class="class">.callout</span> {</div><div class="line">    <span class="attribute">border-color</span><span class="value">: green;</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>會變成：</p>
<figure class="highlight"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.content</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ccc</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.content</span> <span class="class">.callout</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> red</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.content</span><span class="class">.callout</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> green</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><code>&amp;</code> 符號的其他例子：  </p>
<h4 id="(&amp;_後面接_selector)">(<code>&amp;</code> 後面接 selector)</h4>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span> {</div><div class="line">  <span class="attribute">color</span><span class="value">: <span class="hexcolor">#999</span>;</span></div><div class="line">  &amp;<span class="pseudo">:hover</span> {</div><div class="line">    <span class="attribute">color</span><span class="value">: <span class="hexcolor">#777</span>;</span></div><div class="line">  }</div><div class="line">  &amp;<span class="pseudo">:active</span> {</div><div class="line">    <span class="attribute">color</span><span class="value">: <span class="hexcolor">#888</span>;</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>變成：</p>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#999</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">a</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#777</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">a</span><span class="pseudo">:active</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#888</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="(&amp;_前面接_selector)">(<code>&amp;</code> 前面接 selector)</h4>
<figure class="highlight"><figcaption><span>application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class">.sidebar</span> {</div><div class="line">  <span class="attribute">float</span><span class="value">: right;</span></div><div class="line">  <span class="attribute">width</span><span class="value">: <span class="number">300px</span>;</span></div><div class="line">  <span class="class">.users</span> &amp; {</div><div class="line">    <span class="attribute">width</span><span class="value">: <span class="number">400px</span>;</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>變成：</p>
<figure class="highlight"><figcaption><span>application.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class">.sidebar</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.users</span> <span class="class">.sidebar</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">400px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[紀錄 Scss 基本觀念。]]>
    
    </summary>
    
      <category term="Scss" scheme="http://yoursite.com/categories/Scss/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[meta_yield]]></title>
    <link href="http://yoursite.com/blog/2013/01/11/meta-yield/"/>
    <id>http://yoursite.com/blog/2013/01/11/meta-yield/</id>
    <published>2013-01-11T02:10:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>meta yield。<br><a id="more"></a></p>
<p>要在一個 view page 裡面寫 <code>meta</code> 的話，可以這樣寫：</p>
<figure class="highlight"><figcaption><span>/app/views/layouts/application.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="vbscript">&lt;%= @title %&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"&lt;%= @description || 'The best way ...' %&gt;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">"&lt;%= @keywords || 'Social, tweets ..' %&gt;"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>/app/controllers/tweets_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TweetController</span> <span class="inheritance">&lt;</span><span class="inheritance">&lt; <span class="parent">ApplicationController</span></span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>show</div><div class="line">    <span class="variable">@tweet</span> = <span class="constant">Tweet</span>.find(params[<span class="symbol">:id</span>])</div><div class="line">    <span class="variable">@title</span> = <span class="variable">@tweet</span>.user.name</div><div class="line">    <span class="variable">@description</span> = <span class="variable">@tweet</span>.status</div><div class="line">    <span class="variable">@keywords</span> = <span class="variable">@tweet</span>.hash_tags.join(<span class="string">","</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>但這樣一來，不同頁面都要分別設定這些變數，而且 <code>meta</code> 應該是屬於 view 的東西，不應該在 controller 出現。<br>因此可以這樣寫：</p>
<figure class="highlight"><figcaption><span>/app/views/layouts/applicaiton.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="vbscript">&lt;%= yield(:title) %&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"&lt;%= yield(:description) || 'The best way ...' %&gt;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">"&lt;%= yield(:keywords) || 'Social, tweets ..' %&gt;"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>/app/views/tweets/show.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">content_for(<span class="symbol">:title</span>, <span class="variable">@tweet</span>.user.name)</div><div class="line">content_for(<span class="symbol">:description</span>, <span class="variable">@tweet</span>.status)</div><div class="line">content_for(<span class="symbol">:keywords</span>, <span class="variable">@tweet</span>.hash_tags.join(<span class="string">","</span>))</div><div class="line">%&gt;</div></pre></td></tr></table></figure>

<p>或者，乾脆直接包成 helper：</p>
<figure class="highlight"><figcaption><span>/app/helpers/applicaiton_helper.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> </span>title(title)</div><div class="line">  content_for(<span class="symbol">:title</span>, title)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> </span>description(description)</div><div class="line">  content_for(<span class="symbol">:description</span>, description)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> </span>keywords(keywords)</div><div class="line">  content_for(<span class="symbol">:keywords</span>, keywords)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>/app/views/tweets/show.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">title       <span class="variable">@tweet</span>.user.name</div><div class="line">description <span class="variable">@tweet</span>.status</div><div class="line">keywords    <span class="variable">@tweet</span>.hash_tags.<span class="keyword">join</span>(<span class="string">","</span>)</div><div class="line"><span class="variable">%&gt;</span></div></pre></td></tr></table></figure>

<p>這樣就清爽多了！</p>
]]></content>
    <summary type="html">
    <![CDATA[meta yield。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[block helper]]></title>
    <link href="http://yoursite.com/blog/2013/01/10/block-helper/"/>
    <id>http://yoursite.com/blog/2013/01/10/block-helper/</id>
    <published>2013-01-10T01:49:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>block helper。<br><a id="more"></a></p>
<figure class="highlight"><figcaption><span>/app/views/tweets/index.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% @presenter.tweets.<span class="keyword">each</span> <span class="keyword">do</span> |tweet| %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tweet_&lt;%= tweet.id %&gt;"</span></span></div><div class="line">      <span class="attribute">class</span>=<span class="value">"&lt;%= 'favorite' if tweet.is_a_favorite?(current_user) %&gt;"</span>&gt;</div><div class="line">    <span class="vbscript">&lt;%= tweet.status %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% <span class="keyword">end</span> %&gt;</span></div></pre></td></tr></table></figure>

<p>HTML 裡面含有太多的 ruby code，所以可以另外包成一個 helper：</p>
<figure class="highlight"><figcaption><span>/app/views/tweets/index.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% @presenter.tweets.<span class="keyword">each</span> <span class="keyword">do</span> |tweet| %&gt;</span></div><div class="line">  <span class="vbscript">&lt;%= tweet_div_for(tweet, current_user) <span class="keyword">do</span> %&gt;</span></div><div class="line">    <span class="vbscript">&lt;%= tweet.status %&gt;</span></div><div class="line">  <span class="vbscript">&lt;% <span class="keyword">end</span> %&gt;</span></div><div class="line"><span class="vbscript">&lt;% <span class="keyword">end</span> %&gt;</span></div></pre></td></tr></table></figure>

<figure class="highlight"><figcaption><span>/app/helpers/tweets_helper.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> </span>tweet_div_for(tweet, user, &amp;block)</div><div class="line">  klass = <span class="string">'favorite'</span> <span class="keyword">if</span> tweet.is_a_favorite?(user)</div><div class="line"></div><div class="line">  div_for tweet, <span class="symbol">:class</span> =&gt; klass <span class="keyword">do</span></div><div class="line">    <span class="keyword">yield</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h2 id="more_about_yield">more about yield</h2>
<p>一般而言，基本的 application layout 大致如下：</p>
<figure class="highlight"><figcaption><span>/app/views/layouts/application.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="vbscript">&lt;% flash[:notice] <span class="keyword">if</span> flash[:notice] %&gt;</span></div><div class="line"></div><div class="line">  <span class="vbscript">&lt;%= yield %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>但如果要在 <code>&lt;body&gt;</code> 下邊再插入一個 sidebar 的 <code>yiled</code> 區塊，就會是：</p>
<figure class="highlight"><figcaption><span>/app/views/layouts/application.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="vbscript">&lt;%= yield :sidebar %&gt;</span></div><div class="line"></div><div class="line">  <span class="vbscript">&lt;% flash[:notice] <span class="keyword">if</span> flash[:notice] %&gt;</span></div><div class="line"></div><div class="line">  <span class="vbscript">&lt;%= yield %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然後寫個 <code>content_for</code> 區塊來對應上面的 <code>&lt;%= yield :sidebar %&gt;</code>：</p>
<figure class="highlight"><figcaption><span>/app/views/tweets/index.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% content_for(:sidebar) do %&gt;</div><div class="line"><span class="keyword">...</span> html here <span class="keyword">...</span></div><div class="line">&lt;% end %&gt;</div></pre></td></tr></table></figure>

<p>但如果要讓 <code>tweets</code> controller 裡面的每個 action 都需要這個 sidebar 呢？</p>
<h3 id="Nested_Layouts">Nested Layouts</h3>
<p>解法是先在 <code>tweets</code> controller 裡面指定要使用的 layout：</p>
<figure class="highlight"><figcaption><span>/app/controllers/tweets_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TweetController</span> <span class="inheritance">&lt;</span><span class="inheritance">&lt; <span class="parent">ApplicationController</span></span></span></div><div class="line">  layout <span class="string">'with_sidebar'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>然後把剛剛的 <code>content_for(:sidebar)</code> 抽出來，另外包成這個 controller 要使用的 layout。<br>這樣一來，<code>tweets</code> controller 就會先使用指定的 layout 了。</p>
<figure class="highlight"><figcaption><span>/app/views/layouts/with_sidebar.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% content_for(:sidebar) do %&gt;</div><div class="line"><span class="keyword">...</span> html here <span class="keyword">...</span></div><div class="line">&lt;% end %&gt;</div><div class="line"></div><div class="line">&lt;%= render :file =&gt; <span class="string">'layouts/application'</span> %&gt;</div></pre></td></tr></table></figure>

<p>因為要使用原本的 application layout，所以最後會再加上這段： <code>&lt;%= render :file =&gt; &#39;layouts/application&#39; %&gt;</code><br>這樣就會讀取原本的 layout 了：</p>
<figure class="highlight"><figcaption><span>/app/views/layouts/application.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="vbscript">&lt;%= yield :sidebar %&gt;</span></div><div class="line"></div><div class="line">  <span class="vbscript">&lt;% flash[:notice] <span class="keyword">if</span> flash[:notice] %&gt;</span></div><div class="line"></div><div class="line">  <span class="vbscript">&lt;%= yield %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[block helper。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SEO-friendly URL]]></title>
    <link href="http://yoursite.com/blog/2012/12/31/seo-friendly-url/"/>
    <id>http://yoursite.com/blog/2012/12/31/seo-friendly-url/</id>
    <published>2012-12-30T17:42:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>SEO friendly URL。<br><a id="more"></a></p>
<p>這是 Rails 預設產生的 url：<code>/post/2133</code><br>如果要產生具有可讀性的 url 像是：<code>/post/rails-best-practices</code> 或是 <code>/post/2133-rails-best-practices</code>，可以這樣做：</p>
<figure class="highlight"><figcaption><span>/app/models/topic.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">	<span class="function"><span class="keyword">def</span> </span>to_param</div><div class="line">		<span class="string">"<span class="subst">#{id}</span>-<span class="subst">#{name.parameterize}</span>"</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>這樣一來，當我們產生一個 link <code>&lt;%= link_to topic.name, topic %&gt;</code> 時，就會產生 <code>/post/2133-rails-best-practices</code> 這樣的 url。<br>當 user 輸入這個 url 時，id 會是：<code>id =&gt; {&quot;2133-rails-best-practices&quot;}，接著會執行</code>Topic.find(params[:id])<code>，其中</code>find<code>method 會 call</code>to_i<code>把 id 轉成 integer，最後就會變成</code>Topic.find(2133)。</p>
]]></content>
    <summary type="html">
    <![CDATA[SEO friendly URL。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[to_s]]></title>
    <link href="http://yoursite.com/blog/2012/12/31/to-s/"/>
    <id>http://yoursite.com/blog/2012/12/31/to-s/</id>
    <published>2012-12-30T17:33:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>to_s。<br><a id="more"></a></p>
<h2 id="情境">情境</h2>
<p>通常要顯示一個 user 的 name 時，都會這樣做：</p>
<figure class="highlight"><figcaption><span>/app/models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uesr</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">	<span class="function"><span class="keyword">def</span> </span>display_name</div><div class="line">		<span class="string">"<span class="subst">#{first_name}</span> <span class="subst">#{last_name}</span>"</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>然後 view 寫成 <code>&lt;%= @user.display_name %&gt;</code></p>
<h2 id="更方便的寫法">更方便的寫法</h2>
<p>但其實 Rails 裡面有一個 convention：</p>
<figure class="highlight"><figcaption><span>/app/models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uesr</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">	<span class="function"><span class="keyword">def</span> </span>to_s</div><div class="line">		<span class="string">"<span class="subst">#{first_name}</span> <span class="subst">#{last_name}</span>"</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>然後在 view 裡頭寫：<code>&lt;%= @user %&gt;</code> 就可以達到一樣的效果了。</p>
]]></content>
    <summary type="html">
    <![CDATA[to_s。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[delegate]]></title>
    <link href="http://yoursite.com/blog/2012/12/28/delegate/"/>
    <id>http://yoursite.com/blog/2012/12/28/delegate/</id>
    <published>2012-12-28T14:43:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>delegate。<br><a id="more"></a></p>
<h2 id="Law_of_Demeter">Law of Demeter</h2>
<blockquote>

<p>Each unit should have limited knowledge about other units.<br>“Don’t talk to strangers”</p>
</blockquote>


<h2 id="用法">用法</h2>
<p>將 methods 傳給另一個 object</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">	has_one <span class="symbol">:foo</span></div><div class="line">	delegate <span class="symbol">:free?</span>, <span class="symbol">:to</span> =&gt; <span class="symbol">:foo</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>這樣 account.free? 就會呼叫 account.foo.free? 考慮 foo 可能 nil，我們可以多一個檢查：</p>
<pre><code>delegate <span class="symbol">:free?</span>, <span class="symbol">:to</span> =&gt; <span class="string">"something.nil? ? false : something"</span>
</code></pre><p>或是</p>
<pre><code>delegate <span class="symbol">:free?</span>, <span class="symbol">:to</span> =&gt; <span class="symbol">:foo</span>, <span class="symbol">:allow_nil</span> =&gt; <span class="keyword">true</span>    
</code></pre><p>甚至兩層，假設 foo 有 bar：</p>
<pre><code>delegate <span class="symbol">:free?</span>, <span class="symbol">:to</span> =&gt; <span class="string">"foo.bar"</span>
</code></pre><p>這樣 account.free? 就會呼叫 account.foo.bar.free?  </p>
<p>source: <a href="http://ihower.tw/blog/archives/1719/" target="_blank" rel="external">http://ihower.tw/blog/archives/1719/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[delegate。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[counter cache]]></title>
    <link href="http://yoursite.com/blog/2012/12/19/counter-cache/"/>
    <id>http://yoursite.com/blog/2012/12/19/counter-cache/</id>
    <published>2012-12-18T23:20:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>counter cahce。<br><a id="more"></a></p>
<h2 id="情境">情境</h2>
<p>在 twitter 當中，顯示每一則 tweet 有多少的 retweet：<br>分別使用 <code>length</code>、<code>count</code>、以及 <code>size</code> (with <code>counter_cache</code>)。</p>
<h3 id="使用_length">使用 length</h3>
<figure class="highlight"><figcaption><span>/app/views/tweets/index.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% @tweets.<span class="keyword">each</span> <span class="keyword">do</span> |tweet| %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"tweet"</span>&gt;</span></div><div class="line">  	<span class="vbscript">&lt;%= tweet.status %&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"retweets"</span>&gt;</span></div><div class="line">  		<span class="vbscript">&lt;%= pluralize(tweet.retweets.length, <span class="string">"Retweet"</span>) %&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% <span class="keyword">end</span> %&gt;</span></div></pre></td></tr></table></figure>

<p>當中的過程是：<br>    For each Tweet</p>
<pre><code>    1. <span class="operator"><span class="keyword">Select</span> <span class="keyword">all</span> retweets <span class="keyword">where</span> user_id = x
    <span class="number">2.</span> Populate an <span class="built_in">array</span> <span class="keyword">of</span> tweet objects
    <span class="number">3.</span> <span class="keyword">call</span> length <span class="keyword">on</span> that <span class="built_in">array</span></span>
</code></pre><p>看起來明顯不太有效率…</p>
<h3 id="使用_count">使用 count</h3>
<figure class="highlight"><figcaption><span>/app/views/tweets/index.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% @tweets.<span class="keyword">each</span> <span class="keyword">do</span> |tweet| %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"tweet"</span>&gt;</span></div><div class="line">  	<span class="vbscript">&lt;%= tweet.status %&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"retweets"</span>&gt;</span></div><div class="line">  		<span class="vbscript">&lt;%= pluralize(tweet.retweets.count, <span class="string">"Retweet"</span>) %&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% <span class="keyword">end</span> %&gt;</span></div></pre></td></tr></table></figure>

<p>當中的過程是：<br>    For each Tweet</p>
<pre><code>    1. <span class="operator"><span class="keyword">Select</span> <span class="keyword">all</span> retweets <span class="keyword">where</span> user_id = x
    <span class="number">2.</span> <span class="keyword">Do</span> a <span class="keyword">count</span> <span class="keyword">query</span> <span class="keyword">for</span> retweets</span>
</code></pre><p>萬一 tweet 數量一多的話，count query 就會跑很多次，仍然存在著效率問題。</p>
<h3 id="使用_size_with_counter_cache">使用 size with counter_cache</h3>
<figure class="highlight"><figcaption><span>/app/views/tweets/index.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% @tweets.<span class="keyword">each</span> <span class="keyword">do</span> |tweet| %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"tweet"</span>&gt;</span></div><div class="line">  	<span class="vbscript">&lt;%= tweet.status %&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"retweets"</span>&gt;</span></div><div class="line">  		<span class="vbscript">&lt;%= pluralize(tweet.retweets.size, <span class="string">"Retweet"</span>) %&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% <span class="keyword">end</span> %&gt;</span></div></pre></td></tr></table></figure>

<p>當中的過程是：<br>    For each Tweet</p>
<pre><code>    1. <span class="operator"><span class="keyword">Select</span> <span class="keyword">all</span> retweets <span class="keyword">where</span> user_id = x</span>
</code></pre><p>只有一個步驟，簡單多了！</p>
<h2 id="做法">做法</h2>
<p>首先看一下 <code>tweet</code> 與 <code>retweet</code> 之間的關係：<br><code>tweet</code>(視為 <code>original tweet</code>) 與 <code>retweet</code>(視為 <code>retweet tweet</code>) 其實是同一個 model，<br>其中 <code>retweet tweet</code> belongs_to <code>original tweet</code>；<br>而 <code>original tweet</code> has_many <code>retweet tweet</code>。是個 self-referential relationship。</p>
<figure class="highlight"><figcaption><span>/app/models/tweet.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tweet</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  belongs_to <span class="symbol">:original_tweet</span>,</div><div class="line">             <span class="symbol">:class_name</span> =&gt; <span class="string">'Tweet'</span>,</div><div class="line">             <span class="symbol">:foreign_key</span> =&gt; <span class="symbol">:tweet_id</span></div><div class="line"></div><div class="line">  has_many <span class="symbol">:retweets</span>,</div><div class="line">           <span class="symbol">:class_name</span> =&gt; <span class="string">'Tweet'</span>,</div><div class="line">           <span class="symbol">:foreign_key</span> =&gt; <span class="symbol">:tweet_id</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h3 id="加入_counter_cache_column">加入 counter_cache column</h3>
<p>為了實現 <code>counter_cache</code>，要先用 migration 加入 <code>counter_cache</code> column（針對 <code>original tweet</code> 加上 <code>retweet_count</code>）：</p>
<figure class="highlight"><figcaption><span>migration.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class AddCountRetweets</div><div class="line">  self.up</div><div class="line">    add_column :tweets, :retweets_count, :integer, :default =&gt; <span class="number">0</span></div><div class="line">  end</div><div class="line">  <span class="keyword">...</span></div><div class="line">end</div></pre></td></tr></table></figure>

<p>一般的 counter_cache 會直接寫成：<code>belongs_to :model, :counter_cache =&gt; true</code>，但因為這邊的 <code>tweet</code> 有 self-referential relationship 的關係，所以要寫成：</p>
<figure class="highlight"><figcaption><span>/app/models/tweet.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tweet</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  belongs_to <span class="symbol">:original_tweet</span>,</div><div class="line">             <span class="symbol">:class_name</span> =&gt; <span class="string">'Tweet'</span>,</div><div class="line">             <span class="symbol">:foreign_key</span> =&gt; <span class="symbol">:tweet_id</span>,</div><div class="line">             <span class="symbol">:counter_cache</span> =&gt; <span class="symbol">:retweets_count</span></div><div class="line"></div><div class="line">  has_many <span class="symbol">:retweets</span>,</div><div class="line">           <span class="symbol">:class_name</span> =&gt; <span class="string">'Tweet'</span>,</div><div class="line">           <span class="symbol">:foreign_key</span> =&gt; <span class="symbol">:tweet_id</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h2 id="整理">整理</h2>
<p><code>length</code>、<code>count</code>、以及 <code>size</code> 分別在有無 counter_cache 的狀況如下：</p>
<pre><code># without counter_cache
.length   # pull all records then <span class="operator"><span class="keyword">call</span> .length
.<span class="keyword">count</span>    # <span class="keyword">count</span> <span class="keyword">query</span>
.<span class="keyword">size</span>     # <span class="keyword">count</span> <span class="keyword">query</span>

# <span class="keyword">with</span> counter_cache
.length   # pull <span class="keyword">all</span> records <span class="keyword">then</span> <span class="keyword">call</span> .length
.<span class="keyword">count</span>    # <span class="keyword">count</span> <span class="keyword">query</span>
.<span class="keyword">size</span>     # <span class="keyword">no</span> <span class="keyword">query</span>, look <span class="keyword">at</span> <span class="keyword">cache</span></span>
</code></pre><p>這篇 <a href="http://blog.hasmanythrough.com/2008/2/27/count-length-size" target="_blank" rel="external">文章</a> 有進一步的敘述。</p>
]]></content>
    <summary type="html">
    <![CDATA[counter cache。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[避免 N+1 queries]]></title>
    <link href="http://yoursite.com/blog/2012/12/19/bi-mian-n-plus-1-queries/"/>
    <id>http://yoursite.com/blog/2012/12/19/bi-mian-n-plus-1-queries/</id>
    <published>2012-12-18T16:51:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>避免 N+1 queries。<br><a id="more"></a></p>
<h2 id="情境">情境</h2>
<p>tweeter 要列出最近幾個 followers 時：</p>
<figure class="highlight"><figcaption><span>/app/models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>recent_followers</div><div class="line">    <span class="keyword">self</span>.followers.recent.collect{ |f| f.user.name }.to_sentence</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>這樣的結果會是 <code>=&gt; &quot;Gregg, Eric, Dray, and Nate&quot;</code><br>但仔細看一下其中的 SQL queries，會發現當中其實 query 了很多次：<br>    Select followers where user_id=1<br>        Select user where id=2<br>        Select user where id=3<br>        Select user where id=4<br>        Select user where id=5</p>
<p>嚴重影響效率。</p>
<h2 id="解法">解法</h2>
<p>加上 <code>include</code> method：</p>
<figure class="highlight"><figcaption><span>/app/models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>recent_followers</div><div class="line">    <span class="keyword">self</span>.followers.recent.includes(<span class="symbol">:user</span>).collect{ |f| f.user.name }.to_sentence</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>這樣一來，就只會 query 兩次而已，大大增加了效率：<br>    Select followers where user_id=1<br>        Select users where user_id in (2,3,4,5)</p>
<p><a href="https://github.com/flyerhzm/bullet" target="_blank" rel="external">Bullet</a> 這個 gem 可以幫助檢查我們寫的 app 是否有 N+1 queriers。</p>
]]></content>
    <summary type="html">
    <![CDATA[避免 N+1 queries。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[seed]]></title>
    <link href="http://yoursite.com/blog/2012/12/14/seed/"/>
    <id>http://yoursite.com/blog/2012/12/14/seed/</id>
    <published>2012-12-13T17:16:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>seed。<br><a id="more"></a></p>
<h3 id="不好的範例">不好的範例</h3>
<p>在 migration 裡面直接放入 seed：</p>
<figure class="highlight"><figcaption><span>/db/migrate/20110114221048_create_topic.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateTopic</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Migration</span></span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.up</div><div class="line">    create_table <span class="symbol">:topics</span> <span class="keyword">do</span> |t|</div><div class="line">      t.string <span class="symbol">:name</span></div><div class="line">      t.datetime <span class="symbol">:started_trending</span></div><div class="line">      t.integer <span class="symbol">:mentions</span></div><div class="line"></div><div class="line">      t.timestamps</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="constant">Topic</span>.create(<span class="symbol">:name</span> =&gt; <span class="string">"Rails for Zombie"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">1023</span>)</div><div class="line">    <span class="constant">Topic</span>.create(<span class="symbol">:name</span> =&gt; <span class="string">"Tot Ruby Jobs"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">231</span>)</div><div class="line">    <span class="constant">Topic</span>.create(<span class="symbol">:name</span> =&gt; <span class="string">"Ruby5"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">2312</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.down</div><div class="line">    drop_table <span class="symbol">:topics</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h3 id="改良">改良</h3>
<p>通常 seed 會另外放在 <code>/db/seed.rb</code> 裡頭並執行 <code>rake db:seed</code>：</p>
<figure class="highlight"><figcaption><span>/db/seed.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Topic</span>.create(<span class="symbol">:name</span> =&gt; <span class="string">"Rails for Zombie"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">1023</span>)</div><div class="line"><span class="constant">Topic</span>.create(<span class="symbol">:name</span> =&gt; <span class="string">"Tot Ruby Jobs"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">231</span>)</div><div class="line"><span class="constant">Topic</span>.create(<span class="symbol">:name</span> =&gt; <span class="string">"Ruby5"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">2312</span>)</div></pre></td></tr></table></figure>

<p>但如果其中一個 attribute 被設定為 <code>protected</code> 時，<code>rake db:seed</code> 就會失敗：</p>
<figure class="highlight"><figcaption><span>/app/models/topic.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  attr_protected <span class="symbol">:mentions</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h3 id="解決辦法">解決辦法</h3>
<p>為了解決此一問題，可以將 seed 用 hash 的方式包起來：</p>
<figure class="highlight"><figcaption><span>/db/seed.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">topics = [</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Rails for Zombie"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">1023</span>},</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Tot Ruby Jobs"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">231</span>},</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Ruby5"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">2312</span>}</div><div class="line">]</div><div class="line"></div><div class="line">topics.each <span class="keyword">do</span> |attributes|</div><div class="line">  <span class="constant">Topic</span>.each <span class="keyword">do</span> |t|</div><div class="line">    t.name = attributes[<span class="symbol">:name</span>]</div><div class="line">    t.mentions = attributes[<span class="symbol">:mentions</span>]</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>問題解決了。  </p>
<p>但如果想要 update 這些 seed 又該如何呢？</p>
<h4 id="不好的做法">不好的做法</h4>
<figure class="highlight"><figcaption><span>/db/seed.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">topics = [</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Rails for Zombie"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">1023</span>},</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Tot Ruby Jobs"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">231</span>},</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Ruby5"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">2312</span>}</div><div class="line">]</div><div class="line"></div><div class="line"><span class="constant">Topics</span>.destroy_all</div><div class="line"></div><div class="line">topics.each <span class="keyword">do</span> |attributes|</div><div class="line">  <span class="constant">Topic</span>.each <span class="keyword">do</span> |t|</div><div class="line">    t.name = attributes[<span class="symbol">:name</span>]</div><div class="line">    t.mentions = attributes[<span class="symbol">:mentions</span>]</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>最直接的做法就是把既有的 seed 砍掉，然後重新塞入新的 seed。<br>但這個方法非常不好，因為這個 model 可能有其他的 relationships。</p>
<h4 id="好的做法">好的做法</h4>
<figure class="highlight"><figcaption><span>/db/seed.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">topics = [</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Rails for Zombie"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">1023</span>},</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Tot Ruby Jobs"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">231</span>},</div><div class="line">  {<span class="symbol">:name</span> =&gt; <span class="string">"Ruby5"</span>, <span class="symbol">:mentions</span> =&gt; <span class="number">2312</span>}</div><div class="line">]</div><div class="line"></div><div class="line">topics.each <span class="keyword">do</span> |attributes|</div><div class="line">  <span class="constant">Topic</span>.find_or_initialize_by_name(attributes[<span class="symbol">:name</span>]).tap <span class="keyword">do</span> |t|</div><div class="line">    t.mentions = attributes[<span class="symbol">:mentions</span>]</div><div class="line">    t.save!</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[seed。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[improved validation]]></title>
    <link href="http://yoursite.com/blog/2012/12/13/improved-validation/"/>
    <id>http://yoursite.com/blog/2012/12/13/improved-validation/</id>
    <published>2012-12-13T08:40:00.000Z</published>
    <updated>2014-09-16T09:33:16.000Z</updated>
    <content type="html"><![CDATA[<p>improved validation。<br><a id="more"></a></p>
<h2 id="用_Proc_寫_validation">用 Proc 寫 validation</h2>
<h3 id="情境">情境</h3>
<p>Twitter 在 follow 之後，會檢查是否要寄 email：</p>
<figure class="highlight"><figcaption><span>/app/model/following.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Follow</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  after_create <span class="symbol">:send_follower_notification</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>send_follower_notification</div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.followed_user.receive_emails?</div><div class="line">      queue_new_follower_email</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>寫法可以改成：</p>
<figure class="highlight"><figcaption><span>/app/model/following.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Follow</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  after_create <span class="symbol">:queue_new_follower_email</span>, <span class="symbol">:if</span> =&gt; <span class="symbol">:followed_can_receive_emails?</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>followed_can_receive_emails?</div><div class="line">    <span class="keyword">self</span>.followed_user.receive_emails?</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>如果用 block 寫法，可以更簡化：</p>
<figure class="highlight"><figcaption><span>/app/model/following.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Follow</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  after_create <span class="symbol">:queue_new_follower_email</span>,</div><div class="line">               <span class="symbol">:if</span> =&gt; <span class="constant">Proc</span>.new { |f| f.followed_user.receive_emails? }</div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<h2 id="custom_validation_放到_lib">custom validation 放到 lib</h2>
<h3 id="情境-1">情境</h3>
<p>檢查 name 是否含有不恰當的字眼：</p>
<figure class="highlight"><figcaption><span>/app/models/topic.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>validate</div><div class="line">    <span class="keyword">unless</span> <span class="constant">ContentModerator</span>.is_suitable?(<span class="keyword">self</span>.name)</div><div class="line">      <span class="keyword">self</span>.errors.add(<span class="symbol">:name</span>, <span class="string">'is inappropriate'</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>寫法可以改成：</p>
<figure class="highlight"><figcaption><span>/app/models/topic.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  validate <span class="symbol">:appropriate_content</span></div><div class="line"></div><div class="line">	private</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>appropriate_content</div><div class="line">    <span class="keyword">unless</span> <span class="constant">ContentModerator</span>.is_suitable?(<span class="keyword">self</span>.name)</div><div class="line">      <span class="keyword">self</span>.errors.add(<span class="symbol">:name</span>, <span class="string">'is inappropriate'</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>但如果有其他的 models 也要檢查是否含有不恰當的字眼該如何？</p>
<h3 id="共用的_validate_放到_lib">共用的 validate 放到 lib</h3>
<p>原先的 code 就會變成：</p>
<figure class="highlight"><figcaption><span>/app/models/topic.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span></div><div class="line">  validate <span class="symbol">:name</span>, <span class="symbol">:appropriate</span> =&gt; <span class="keyword">true</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>把原本檢查不恰當字眼的部分包成 <code>validator</code> 放到 lib 裡面：</p>
<figure class="highlight"><figcaption><span>/lib/appropriate_validator.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppropriateValidator</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::EachValidator</span></span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> </span>validate_each(record, attribute, value)</div><div class="line">    <span class="keyword">unless</span> <span class="constant">ContentModerator</span>.is_suitable?(value)</div><div class="line">      record.errors.add(attribute, <span class="string">'is inappropriate'</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>最後記得在要使用這個 validator 的 model 裡面 require 這個 class（Rails 3 預設不會 auto-load <code>/lib</code>）。</p>
]]></content>
    <summary type="html">
    <![CDATA[improved validation。]]>
    
    </summary>
    
      <category term="Ruby on Rails" scheme="http://yoursite.com/categories/Ruby-on-Rails/"/>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Ruby-on-Rails/Skill/"/>
    
  </entry>
  
</feed>
